
//▒██   ██▒▒██   ██▒▒██   ██▒   ▄▄▄█████▓ ██░ ██ ▓█████    ▓█████▄  ▄▄▄       ██▀███   ██ ▄█▀ ██▓███   ██▀███   ▒█████    ▄████  ██▀███   ▄▄▄       ███▄ ▄███▓▓█████  ██▀███     ▒██   ██▒▒██   ██▒▒██   ██▒
//▒▒ █ █ ▒░▒▒ █ █ ▒░▒▒ █ █ ▒░   ▓  ██▒ ▓▒▓██░ ██▒▓█   ▀    ▒██▀ ██▌▒████▄    ▓██ ▒ ██▒ ██▄█▒ ▓██░  ██▒▓██ ▒ ██▒▒██▒  ██▒ ██▒ ▀█▒▓██ ▒ ██▒▒████▄    ▓██▒▀█▀ ██▒▓█   ▀ ▓██ ▒ ██▒   ▒▒ █ █ ▒░▒▒ █ █ ▒░▒▒ █ █ ▒░
//░░  █   ░░░  █   ░░░  █   ░   ▒ ▓██░ ▒░▒██▀▀██░▒███      ░██   █▌▒██  ▀█▄  ▓██ ░▄█ ▒▓███▄░ ▓██░ ██▓▒▓██ ░▄█ ▒▒██░  ██▒▒██░▄▄▄░▓██ ░▄█ ▒▒██  ▀█▄  ▓██    ▓██░▒███   ▓██ ░▄█ ▒   ░░  █   ░░░  █   ░░░  █   ░
// ░ █ █ ▒  ░ █ █ ▒  ░ █ █ ▒    ░ ▓██▓ ░ ░▓█ ░██ ▒▓█  ▄    ░▓█▄   ▌░██▄▄▄▄██ ▒██▀▀█▄  ▓██ █▄ ▒██▄█▓▒ ▒▒██▀▀█▄  ▒██   ██░░▓█  ██▓▒██▀▀█▄  ░██▄▄▄▄██ ▒██    ▒██ ▒▓█  ▄ ▒██▀▀█▄      ░ █ █ ▒  ░ █ █ ▒  ░ █ █ ▒ 
//▒██▒ ▒██▒▒██▒ ▒██▒▒██▒ ▒██▒     ▒██▒ ░ ░▓█▒░██▓░▒████▒   ░▒████▓  ▓█   ▓██▒░██▓ ▒██▒▒██▒ █▄▒██▒ ░  ░░██▓ ▒██▒░ ████▓▒░░▒▓███▀▒░██▓ ▒██▒ ▓█   ▓██▒▒██▒   ░██▒░▒████▒░██▓ ▒██▒   ▒██▒ ▒██▒▒██▒ ▒██▒▒██▒ ▒██▒
//▒▒ ░ ░▓ ░▒▒ ░ ░▓ ░▒▒ ░ ░▓ ░     ▒ ░░    ▒ ░░▒░▒░░ ▒░ ░    ▒▒▓  ▒  ▒▒   ▓▒█░░ ▒▓ ░▒▓░▒ ▒▒ ▓▒▒▓▒░ ░  ░░ ▒▓ ░▒▓░░ ▒░▒░▒░  ░▒   ▒ ░ ▒▓ ░▒▓░ ▒▒   ▓▒█░░ ▒░   ░  ░░░ ▒░ ░░ ▒▓ ░▒▓░   ▒▒ ░ ░▓ ░▒▒ ░ ░▓ ░▒▒ ░ ░▓ ░
//░░   ░▒ ░░░   ░▒ ░░░   ░▒ ░       ░     ▒ ░▒░ ░ ░ ░  ░    ░ ▒  ▒   ▒   ▒▒ ░  ░▒ ░ ▒░░ ░▒ ▒░░▒ ░       ░▒ ░ ▒░  ░ ▒ ▒░   ░   ░   ░▒ ░ ▒░  ▒   ▒▒ ░░  ░      ░ ░ ░  ░  ░▒ ░ ▒░   ░░   ░▒ ░░░   ░▒ ░░░   ░▒ ░
// ░    ░   ░    ░   ░    ░       ░       ░  ░░ ░   ░       ░ ░  ░   ░   ▒     ░░   ░ ░ ░░ ░ ░░         ░░   ░ ░ ░ ░ ▒  ░ ░   ░   ░░   ░   ░   ▒   ░      ░      ░     ░░   ░     ░    ░   ░    ░   ░    ░  
// ░    ░   ░    ░   ░    ░               ░  ░  ░   ░  ░      ░          ░  ░   ░     ░  ░               ░         ░ ░        ░    ░           ░  ░       ░      ░  ░   ░         ░    ░   ░    ░   ░    ░  
//                                                          ░                                                        

//=======================================================================================
//         PeXploit V1.0 White Theme
//=======================================================================================



#region Using
using edatat;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Threading;
using System.IO;
using System.Reflection;
using System.Media;
using System.Security.Cryptography;
using System.Security;
using System.Net;
using System.Globalization;
using System.Net.Mime;
using System.IO.Compression;
using NAudio;
using NAudio.Wave;
using SharpMod;
using SharpMod.DSP;
using SharpMod.SoundRenderer;
using SharpMod.Song;
using System.Net.NetworkInformation;
using System.Diagnostics;
#endregion
namespace PeXploit
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }
        #region << Version Info >>

        string appversion = "V1.0";


        #endregion << Version Info >>

        #region << Public >>

        public void ResultText(string log)
        {
            lblPackageType.Invoke(new Action(() => lblPackageType.Text = (log)));
            Application.DoEvents();
        }

        #endregion << Public >>

        #region << BackgroundWorkers >>

        #region << Copying PKG(s) >>

        private void pkgcopyworker_DoWork_1(object sender, DoWorkEventArgs e)
        {
            btnPKG.Invoke(new Action(() => pkg("Adding PKG")));
            btnPKG.Invoke(new Action(() => this.btnPKG.Enabled = false));
            btnRUN.Invoke(new Action(() => this.btnRUN.Enabled = false));
            Tracker.Invoke(new Action(() => log("Copying " + new DirectoryInfo(txtPKG.Text).Name + " to PeXploit Folder")));
            File.Copy(txtPKG.Text, Application.StartupPath + @"\" + new DirectoryInfo(txtPKG.Text).Name, true);
            Tracker.Invoke(new Action(() => log("Copy Complete")));
        }

        private void pkgcopyworker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            this.btnPKG.Enabled = true;
            this.btnRUN.Enabled = true;
            this.btnPKG.Text = "Load Package(s)";
            this.notifyIcon1.ShowBalloonTip(0x7d, "PeXploit", "Copy Copleted", ToolTipIcon.Info);
        }

        #endregion << Copying PKG(s) >>

        #region << Usernumber Code >>

        private void UsernumberReader_DoWork(object sender, DoWorkEventArgs e)
        {
            string command = "ps3xport.exe ExtractPSID ./ psid.bin SetPSID psid.bin ReadIndex ./archive.dat";
            string retun = CMD(command);
            string[] lines = System.IO.File.ReadAllLines(Application.StartupPath + "\\out.txt");
            foreach (string line in lines)
            {
                for (int i = 1; i <= 9; i++)
                {
                    string User = "/dev_hdd0/home/0000000" + i;
                    {
                        if (line.Contains(User))
                        {
                            if (!usernumcbx.Items.Contains("0000000" + i))
                            {
                                usernumcbx.Invoke(new Action(() => usernumcbx.Items.Add("0000000" + i)));
                                usernumcbx.Invoke(new Action(() => usernumcbx.SelectedIndex = 0));
                            }
                        }
                    }
                }
                for (int i = 10; i <= 39; i++)
                {
                    string User = "/dev_hdd0/home/000000" + i;
                    {
                        if (line.Contains(User))
                        {
                            if (!usernumcbx.Items.Contains("000000" + i))
                            {
                                usernumcbx.Invoke(new Action(() => usernumcbx.Items.Add("000000" + i)));
                            }
                        }
                    }
                }
            }
            File.Delete("out.txt");
        }

        private void UsernumberReader_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            if (usernumcbx.Items.Count == 0)
            {
                Tracker.Invoke(new Action(() => log("Usernumbers Added")));
                btnPKG.Invoke(new Action(() => this.btnPKG.Enabled = true));
            }
            else
            {
                Tracker.Invoke(new Action(() => log("Usernumbers Added")));
                btnPKG.Invoke(new Action(() => this.btnPKG.Enabled = true));
            }

        }

        #endregion << Usernumber Code >>

        #region << Install PKG(s) >>

        private void pkginstallworker_DoWork(object sender, DoWorkEventArgs e)
        {
            try
            {

                #region << Bubble Install >>
                if (radioButton1.Checked == true) //bubbel install mode via ps3 Only C00 games
                {

                    #region << Foreach the games selected >>
                    foreach (string line in pkglist)
                    {
                        FileInfo ini = new FileInfo(line);
                        Tracker.Invoke(new Action(() => log("Creating Bubbel Install " + ini.Name + " And Adding To Environment")));//invoke a list box element
                        string decryptedPKGFileName = this.ReadPKGFile(line, ini);
                        if ((decryptedPKGFileName != null) && (decryptedPKGFileName != string.Empty))
                        {
                            File.Copy(line, Application.StartupPath + "\\" + ini.Name, true);
                            CreatePDBFiles(ini.Name);
                        }
                    }
                    #endregion << Foreach the games selected >>
                    Tracker.Invoke(new Action(() => log("All .pkg(s) Ready For Bubbel Install")));
                    Tracker.Invoke(new Action(() => log("Copying important backup data to working directory...This May Take Some Time")));
                    Tracker.Invoke(new Action(() => log("Cleaning Up Files If Any Are Found")));
                    string exdata = Application.StartupPath + @"\\exdata\\dev_hdd0\\home\\" + usernum + "\\exdata"; //usernumber and exdata directory
                    #region //Step 3 - Settup Directories so we can add all the info needed well anything u want really

                    Tracker.Invoke(new Action(() => log("Setting up directories..")));
                    Tracker.Invoke(new Action(() => log("Creating Custom Environment..")));

                    string dir = Application.StartupPath + "\\CustomEnvoirment"; //start building the path could propebly do it like below

                    string xDPxdir = Application.StartupPath + "\\CustomEnvoirment\\dev_hdd0\\game\\XDPX00008"; //dont know why sometimes gives a corrupt data on the xmb ? but makes a nice icon in game utility

                    string mms = Application.StartupPath + "\\CustomEnvoirment"; //build for recovery rebuild but started to use it for more than just the recovery rebuild

                    string restore = Application.StartupPath + "\\db.err"; //if u know code ull see what this does later
                    #endregion
                    FileInfo fi = new FileInfo(txtBack.Text); //info from the backup folder 
                    string dirPath = fi.Directory.FullName.Replace("\\", "/"); //Ensure a working directory
                    #region //Build The Directory
                    if (!Directory.Exists(dir))
                        Directory.CreateDirectory(dir);
                    dir += "\\dev_hdd0";
                    if (!Directory.Exists(dir))
                        Directory.CreateDirectory(dir);
                    dir += "\\game";
                    if (!Directory.Exists(dir))
                        Directory.CreateDirectory(dir);

                    if (!Directory.Exists(mms))
                        Directory.CreateDirectory(mms);
                    mms += "\\dev_hdd0";
                    if (!Directory.Exists(mms))
                        Directory.CreateDirectory(mms);
                    mms += "\\mms";
                    if (!Directory.Exists(mms))
                        Directory.CreateDirectory(mms);
                    #endregion
                    //Cleanup Could Have Been Done Another Way i Guess But I Wanted To Ensure That This Part is NOOBproof(or Atleast Somewhat)
                    #region << Archive Handeling - Deleting >>

                    #region //Check And Delete archive.dat if it exists

                    #region << Archive 1>>
                    if (File.Exists(Application.StartupPath + "\\archive.dat"))
                        File.Delete(Application.StartupPath + "\\archive.dat");
                    for (int i = 0; i <= 9; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive_0" + i + ".dat"))
                            File.Delete(Application.StartupPath + "\\archive_0" + i + ".dat");
                    }
                    for (int i = 10; i <= 99; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive_" + i + ".dat"))
                            File.Delete(Application.StartupPath + "\\archive_" + i + ".dat");
                    }
                    #endregion << Archive 1>>
                    #region << Archive 2 >>
                    if (File.Exists(Application.StartupPath + "\\archive2.dat"))
                        File.Delete(Application.StartupPath + "\\archive2.dat");
                    for (int i = 0; i <= 9; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive2_0" + i + ".dat"))
                            File.Delete(Application.StartupPath + "\\archive2_0" + i + ".dat");
                    }
                    for (int i = 10; i <= 99; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive2_" + i + ".dat"))
                            File.Delete(Application.StartupPath + "\\archive2_" + i + ".dat");
                    }
                    #endregion << Archive 2 >>

                    #endregion //Check And Delete archive.dat if it exists

                    #region //start deleting backups if there are any

                    #region << Archive 1_00 >>
                    for (int i = 0; i <= 9; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive_0" + i + ".bak"))
                            File.Delete(Application.StartupPath + "\\archive_0" + i + ".bak");
                    }
                    for (int i = 10; i <= 99; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive_" + i + ".bak"))
                            File.Delete(Application.StartupPath + "\\archive_" + i + ".bak");
                    }

                    #endregion << Archive 1_00 >>

                    #region << Archive 2_00 >>
                    for (int i = 0; i <= 9; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive2_0" + i + ".bak"))
                            File.Delete(Application.StartupPath + "\\archive2_0" + i + ".bak");
                    }
                    for (int i = 10; i <= 99; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive2_" + i + ".bak"))
                            File.Delete(Application.StartupPath + "\\archive2_" + i + ".bak");
                    }

                    #endregion << Archive 2_00 >>

                    #region //archive.bak

                    #region << Archive 1 >>
                    if (File.Exists(Application.StartupPath + "\\archive.bak"))
                        File.Delete(Application.StartupPath + "\\archive.bak");
                    #endregion << Archive 1 >>

                    #region << Archive 2 >>
                    if (File.Exists(Application.StartupPath + "\\archive2.bak"))
                        File.Delete(Application.StartupPath + "\\archive2.bak");
                    #endregion << Archive 2 >>

                    #endregion

                    #endregion//end backups archive_00

                    #region //tmp file check

                    #region << Archive 1_00 >>
                    for (int i = 0; i <= 9; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive_0" + i + ".tmp"))
                            File.Delete(Application.StartupPath + "\\archive_0" + i + ".tmp");
                    }
                    for (int i = 10; i <= 99; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive_" + i + ".tmp"))
                            File.Delete(Application.StartupPath + "\\archive_" + i + ".tmp");
                    }

                    #endregion << Archive1_00 >>

                    #region << Archive 2_00 >>
                    for (int i = 0; i <= 9; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive2_0" + i + ".tmp"))
                            File.Delete(Application.StartupPath + "\\archive2_0" + i + ".tmp");
                    }
                    for (int i = 10; i <= 99; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive2_" + i + ".tmp"))
                            File.Delete(Application.StartupPath + "\\archive2_" + i + ".tmp");
                    }

                    #endregion << Archive 2_00 >>

                    #endregion

                    #endregion << Archive Handeling - Deleting >>

                    #region << Archive Handeling - Copying >>
                    Tracker.Invoke(new Action(() => log("Copying archive.dat ....")));
                    File.Copy(dirPath + "/archive.dat", Application.StartupPath + "\\archive.dat");
                    #region //copy archive.dat
                    for (int i = 0; i <= 9; i++)
                    {
                        if (File.Exists(dirPath + "/archive_0" + i + ".dat"))
                        {
                            Tracker.Invoke(new Action(() => log("Copying archive_0" + i + ".dat ....")));
                            File.Copy(dirPath + "/archive_0" + i + ".dat", Application.StartupPath + "\\archive_0" + i + ".dat");
                        }
                    }
                    for (int i = 10; i <= 99; i++)
                    {
                        if (File.Exists(dirPath + "/archive_" + i + ".dat"))
                        {
                            Tracker.Invoke(new Action(() => log("Copying archive_" + i + ".dat ....")));
                            File.Copy(dirPath + "/archive_" + i + ".dat", Application.StartupPath + "\\archive_" + i + ".dat");
                        }
                    }

                    #endregion


                    #endregion << Archive Handeling - Copying >>
                    Tracker.Invoke(new Action(() => log("=======All Archives Coppied=========")));
                    Tracker.Invoke(new Action(() => log("Adding Files To Environment ....")));
                    #region Batch Install edats
                    scan_files();
                    IEnumerable<string> enumerable;
                    string edatsf = Application.StartupPath + @"\edats\";
                    try
                    {
                        enumerable = Directory.EnumerateFiles(edatsf, "*.edat", SearchOption.AllDirectories);
                        foreach (string str4 in enumerable)
                        {
                            FileInfo edatname = new FileInfo(str4);
                            if (!Directory.Exists(exdata))
                                Directory.CreateDirectory(exdata);
                            File.Move(str4, exdata + @"\\" + edatname.Name);
                        }
                    }
                    catch
                    {
                    }
                    #endregion
                    #region //custom edats
                    if (txtEdat.Text != "")
                    {
                        foreach (string line in edats)
                        {
                            Tracker.Invoke(new Action(() => log("Adding " + System.IO.Path.GetFileName(line))));
                            if (!Directory.Exists(exdata))
                                Directory.CreateDirectory(exdata);
                            File.Copy(line, exdata + "\\" + System.IO.Path.GetFileName(line), true);
                        }
                        Tracker.Invoke(new Action(() => log("========All Edat(s) Added=========")));
                    }
                    #endregion
                    File.Copy(restore, mms + "\\db.err");
                    string vsh = Application.StartupPath + "\\CustomEnvoirment\\dev_hdd0\\vsh\\game_pkg";
                    if (!Directory.Exists(vsh))
                    {
                        Directory.CreateDirectory(vsh);
                    }
                    DirectoryCopy(Application.StartupPath + @"\\game_pkg", vsh + "\\", true);
                    if (Directory.Exists(Application.StartupPath + "\\exdata"))
                    {
                        DirectoryCopy(Application.StartupPath + "\\exdata", Application.StartupPath + "\\CustomEnvoirment\\", true);
                    }




                    #region //Check for any existing duplicates and delete them from the backup
                    Tracker.Invoke(new Action(() => log("Deleting any potential duplicate files in backup...")));
                    string com;
                    string ret;
                    foreach (string info in pkglist)
                    {
                        FileInfo PKGNAme = new FileInfo(info);
                        com = "ps3xport.exe ExtractPSID ./ psid.bin SetPSID psid.bin DeletePath ./ /dev_hdd0/game/" + PKGNAme.Name + "/";
                        ret = CMD(com);
                    }
                    File.Delete("out.txt");
                    Tracker.Invoke(new Action(() => log("======Dublicates have been cleared=======")));
                    #endregion
                    #region//Install Custom PKG Files
                    this.notifyIcon1.ShowBalloonTip(0x7d0, "PeXploit", "Installing Pkg(s)", ToolTipIcon.Info);
                    Tracker.Invoke(new Action(() => log("Installing PKG(s) files...")));
                    Tracker.Invoke(new Action(() => log("This May Take A While ...")));
                    com = "ps3xport.exe ExtractPSID ./ psid.bin SetPSID psid.bin Add ./ CustomEnvoirment";
                    ret = CMD(com);
                    while (File.Exists(Application.StartupPath + "\\archive_00.tmp"))
                    {
                        Tracker.Invoke(new Action(() => log("Busy.......")));
                        Thread.Sleep(1000);
                    }
                    Tracker.Invoke(new Action(() => log("================PKG(s) Installed============= ")));
                    File.Delete("out.txt");
                    #endregion
                    #region//Copy backup files back to actual backup

                    Tracker.Invoke(new Action(() => log("Moving backup files from working directory...")));
                    //archive 
                    if (File.Exists(dirPath + "/archive.dat"))
                    {
                        if (backupdata == true)
                        {
                            if (File.Exists(dirPath + "/archive.dat.bak"))
                                File.Delete(dirPath + "/archive.dat.bak");
                            Tracker.Invoke(new Action(() => log("Checking archive.dat")));
                            File.Copy(dirPath + "/archive.dat", dirPath + "/archive.dat.bak", true);
                        }
                        File.Delete(dirPath + "/archive.dat");
                    }
                    //archive0
                    for (int i = 0; i <= 9; i++)
                    {
                        if (File.Exists(dirPath + "/archive_0" + i + ".dat"))
                        {
                            if (backupdata == true)
                            {
                                if (File.Exists(dirPath + "/archive_0" + i + ".dat.bak"))
                                    File.Delete(dirPath + "/archive_0" + i + ".dat.bak");
                                Tracker.Invoke(new Action(() => log("Checking Archive_0" + i + ".dat")));
                                File.Copy(dirPath + "/archive_0" + i + ".dat", dirPath + "/archive_0" + i + ".dat.bak", true);
                            }
                            File.Delete(dirPath + "/archive_0" + i + ".dat");
                        }
                    }
                    //archive00
                    for (int i = 10; i <= 99; i++)
                    {
                        if (File.Exists(dirPath + "/archive_" + i + ".dat"))
                        {
                            if (backupdata == true)
                            {
                                if (File.Exists(dirPath + "/archive_" + i + ".dat.bak"))
                                    File.Delete(dirPath + "/archive_" + i + ".dat.bak");
                                Tracker.Invoke(new Action(() => log("Checking Archive_" + i + ".dat")));
                                File.Copy(dirPath + "/archive_" + i + ".dat", dirPath + "/archive_" + i + ".dat.bak", true);
                            }
                            File.Delete(dirPath + "/archive_" + i + ".dat");
                        }
                    }
                    if (backupdata == true)
                        Tracker.Invoke(new Action(() => log("========Archive Passed Checks========")));
                    #endregion
                    #region //copy archive
                    Tracker.Invoke(new Action(() => log("Copying Archive")));
                    File.Copy(Application.StartupPath + "\\archive.dat", dirPath + "/archive.dat");
                    for (int i = 0; i <= 9; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive_0" + i + ".dat"))
                        {
                            Tracker.Invoke(new Action(() => log("Copying Archive_0" + i + "")));
                            File.Copy(Application.StartupPath + "\\archive_0" + i + ".dat", dirPath + "/archive_0" + i + ".dat");
                        }
                    }
                    for (int i = 10; i <= 99; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive_" + i + ".dat"))
                        {
                            Tracker.Invoke(new Action(() => log("Copying Archive_" + i + "")));
                            File.Copy(Application.StartupPath + "\\archive_" + i + ".dat", dirPath + "/archive_" + i + ".dat");
                        }
                    }
                    Tracker.Invoke(new Action(() => log("=======Archive Completed ======")));
                    #endregion


                    #region//Step 9 - Remove files from working directory
                    Tracker.Invoke(new Action(() => log("Deleting final files from working directory...")));
                    if (File.Exists("psid.bin"))
                        File.Delete("psid.bin");
                    if (Directory.Exists(Application.StartupPath + "\\exdata"))
                        Directory.Delete(Application.StartupPath + "\\exdata", true);
                    if (Directory.Exists(Application.StartupPath + "\\mms"))
                        Directory.Delete(Application.StartupPath + "\\mms", true);
                    for (int i = 0; i <= 9; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive_0" + i + ".tmp"))
                            File.Delete(Application.StartupPath + "\\archive_0" + i + ".tmp");
                    }
                    for (int i = 10; i <= 99; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive_" + i + ".tmp"))
                            File.Delete(Application.StartupPath + "\\archive_" + i + ".tmp");
                    }
                    for (int i = 0; i <= 9; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive2_0" + i + ".tmp"))
                            File.Delete(Application.StartupPath + "\\archive2_0" + i + ".tmp");
                    }
                    for (int i = 10; i <= 99; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive2_" + i + ".tmp"))
                            File.Delete(Application.StartupPath + "\\archive2_" + i + ".tmp");
                    }
                    if (Directory.Exists(Application.StartupPath + "\\CustomEnvoirment"))
                        Directory.Delete(Application.StartupPath + "\\CustomEnvoirment", true);
                    try
                    {
                        if (Directory.Exists(Application.StartupPath + @"\\game_pkg"))
                            Directory.Delete(Application.StartupPath + @"\\game_pkg", true);
                    }
                    catch { }

                    string path = Application.StartupPath;
                    try
                    {
                        enumerable = Directory.EnumerateFiles(path, "*.DEC", SearchOption.AllDirectories);
                        foreach (string str4 in enumerable)
                        {
                            FileInfo decdelete = new FileInfo(str4);
                            Tracker.Invoke(new Action(() => log("Deleting " + decdelete.Name)));
                            File.Delete(str4);
                        }
                    }
                    catch
                    {
                    }
                    try
                    {
                        enumerable = Directory.EnumerateFiles(path, "*.pkg", SearchOption.AllDirectories);
                        foreach (string str4 in enumerable)
                        {
                            FileInfo pkgdelete = new FileInfo(str4);
                            Tracker.Invoke(new Action(() => log("Deleting " + pkgdelete.Name)));
                            File.Delete(str4);
                        }
                    }
                    catch
                    {
                    }
                    try
                    {
                        enumerable = Directory.EnumerateFiles(path, "*.bak", SearchOption.AllDirectories);
                        foreach (string str4 in enumerable)
                        {
                            FileInfo pkgdelete = new FileInfo(str4);
                            Tracker.Invoke(new Action(() => log("Deleting " + pkgdelete.Name)));
                            File.Delete(str4);
                        }
                    }
                    catch
                    {
                    }
                    this.notifyIcon1.ShowBalloonTip(0x7d, "PeXploit", "PKG(s) Injected", ToolTipIcon.Info);
                    SystemSounds.Beep.Play();
                    MessageBox.Show("Complete.\r\nBackup saved to " + dirPath + "\n Restore Your Backup");
                    progressBar1.Invoke(new Action(() => progressBar1.Visible = false));
                }
                    #endregion

                #endregion << Bubble Install >>

                #region << PeXploit PKG(s) >>
                else if (radioButton2.Checked == true) //PeXploit Decrypt 
                {

                    foreach (string line in pkglist)
                    {
                        FileInfo ini = new FileInfo(line);
                        Tracker.Invoke(new Action(() => log("Decrypted " + ini.Name + " And Adding To Environment")));
                        string decryptedPKGFileName = this.DecryptPKGFile(line, ini);
                        if ((decryptedPKGFileName != null) && (decryptedPKGFileName != string.Empty))
                        {
                            // File.Copy(line, Application.StartupPath + "\\" + ini.Name, true);
                            this.ExtractFiles(decryptedPKGFileName, line, ini);
                        }
                    }
                    Tracker.Invoke(new Action(() => log("All .pkg(s) Decrypted")));
                    Tracker.Invoke(new Action(() => log("Copying important backup data to working directory...This May Take Some Time")));
                    Tracker.Invoke(new Action(() => log("Cleaning Up Files If Any Are Found")));
                    string exdata = Application.StartupPath + @"\\exdata\\dev_hdd0\\home\\" + usernum + "\\exdata"; //usernumber and exdata directory
                    #region //Step 3 - Settup Directories so we can add all the info needed well anything u want really

                    Tracker.Invoke(new Action(() => log("Setting up directories..")));
                    Tracker.Invoke(new Action(() => log("Creating Custom Environment..")));

                    string dir = Application.StartupPath + "\\CustomEnvoirment"; //start building the path could propebly do it like below

                    string xDPxdir = Application.StartupPath + "\\CustomEnvoirment\\dev_hdd0\\game\\XDPX00008"; //dont know why sometimes gives a corrupt data on the xmb ? but makes a nice icon in game utility

                    string mms = Application.StartupPath + "\\CustomEnvoirment"; //build for recovery rebuild but started to use it for more than just the recovery rebuild

                    string restore = Application.StartupPath + "\\db.err"; //if u know code ull see what this does later
                    #endregion
                    FileInfo fi = new FileInfo(txtBack.Text); //info from the backup folder 
                    string dirPath = fi.Directory.FullName.Replace("\\", "/"); //Ensure a working directory
                    #region //Build The Directory
                    if (!Directory.Exists(dir))
                        Directory.CreateDirectory(dir);
                    dir += "\\dev_hdd0";
                    if (!Directory.Exists(dir))
                        Directory.CreateDirectory(dir);
                    dir += "\\game";
                    if (!Directory.Exists(dir))
                        Directory.CreateDirectory(dir);

                    if (!Directory.Exists(xDPxdir))
                        Directory.CreateDirectory(xDPxdir);
                    if (!Directory.Exists(mms))
                        Directory.CreateDirectory(mms);
                    mms += "\\dev_hdd0";
                    if (!Directory.Exists(mms))
                        Directory.CreateDirectory(mms);
                    mms += "\\mms";
                    if (!Directory.Exists(mms))
                        Directory.CreateDirectory(mms);
                    #endregion
                    //Cleanup Could Have Been Done Another Way i Guess But I Wanted To Ensure That This Part is fullproof 
                    //archive 15 ? 1arch = 4gb 14 = 60gb ?
                    //so if i add 30arhives means 120 gb x2 for archive and archive2 = 320gb standard ps3 hdd size
                    //soo if archive 99 = 4gb each == 396gb *2 for archive2 = 792GB +8GBreally why would u need more ???
                    #region //Check And Delete archive.dat if it exists
                    if (File.Exists(Application.StartupPath + "\\archive.dat"))
                        File.Delete(Application.StartupPath + "\\archive.dat");
                    for (int i = 0; i <= 9; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive_0" + i + ".dat"))
                            File.Delete(Application.StartupPath + "\\archive_0" + i + ".dat");
                    }
                    for (int i = 10; i <= 99; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive_" + i + ".dat"))
                            File.Delete(Application.StartupPath + "\\archive_" + i + ".dat");
                    }


                    #endregion//end for 30 archives
                    #region //start deleting backups if there are any

                    for (int i = 0; i <= 9; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive_0" + i + ".bak"))
                            File.Delete(Application.StartupPath + "\\archive_0" + i + ".bak");
                    }
                    for (int i = 10; i <= 99; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive_" + i + ".bak"))
                            File.Delete(Application.StartupPath + "\\archive_" + i + ".bak");
                    }

                    #endregion//end backups archive_00
                    #region //archive.bak

                    if (File.Exists(Application.StartupPath + "\\archive.bak"))
                        File.Delete(Application.StartupPath + "\\archive.bak");


                    #endregion
                    #region //tmp file check
                    for (int i = 0; i <= 9; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive_0" + i + ".tmp"))
                            File.Delete(Application.StartupPath + "\\archive_0" + i + ".tmp");
                    }
                    for (int i = 10; i <= 99; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive_" + i + ".tmp"))
                            File.Delete(Application.StartupPath + "\\archive_" + i + ".tmp");
                    }
                    #endregion

                    Tracker.Invoke(new Action(() => log("Copying archive.dat ....")));
                    File.Copy(dirPath + "/archive.dat", Application.StartupPath + "\\archive.dat");
                    #region //copy archive.dat
                    for (int i = 0; i <= 9; i++)
                    {
                        if (File.Exists(dirPath + "/archive_0" + i + ".dat"))
                        {
                            Tracker.Invoke(new Action(() => log("Copying archive_0" + i + ".dat ....")));
                            File.Copy(dirPath + "/archive_0" + i + ".dat", Application.StartupPath + "\\archive_0" + i + ".dat");
                        }
                    }
                    for (int i = 10; i <= 99; i++)
                    {
                        if (File.Exists(dirPath + "/archive_" + i + ".dat"))
                        {
                            Tracker.Invoke(new Action(() => log("Copying archive_" + i + ".dat ....")));
                            File.Copy(dirPath + "/archive_" + i + ".dat", Application.StartupPath + "\\archive_" + i + ".dat");
                        }
                    }

                    #endregion
                    Tracker.Invoke(new Action(() => log("=======All Archives Coppied=========")));
                    Tracker.Invoke(new Action(() => log("Adding Files To Environment ....")));
                    #region Batch Install edats
                    scan_files();
                    IEnumerable<string> enumerable;
                    string edatsf = Application.StartupPath + @"\edats\";
                    try
                    {
                        enumerable = Directory.EnumerateFiles(edatsf, "*.edat", SearchOption.AllDirectories);
                        foreach (string str4 in enumerable)
                        {
                            FileInfo edatname = new FileInfo(str4);
                            if (!Directory.Exists(exdata))
                                Directory.CreateDirectory(exdata);
                            File.Move(str4, exdata + @"\\" + edatname.Name);
                        }
                    }
                    catch
                    {
                    }
                    #endregion
                    #region //custom edats
                    if (txtEdat.Text != "")
                    {
                        foreach (string line in edats)
                        {
                            Tracker.Invoke(new Action(() => log("Adding " + System.IO.Path.GetFileName(line))));
                            if (!Directory.Exists(exdata))
                                Directory.CreateDirectory(exdata);
                            File.Copy(line, exdata + "\\" + System.IO.Path.GetFileName(line), true);
                        }
                        Tracker.Invoke(new Action(() => log("========All Edat(s) Added=========")));
                    }
                    #endregion
                    File.Copy(restore, mms + "\\db.err");
                    if (Directory.Exists(Application.StartupPath + "\\exdata"))
                    {
                        DirectoryCopy(Application.StartupPath + "\\exdata", Application.StartupPath + "\\CustomEnvoirment\\", true);
                    }

                    #region //Check for any existing duplicates and delete them from the backup
                    Tracker.Invoke(new Action(() => log("Deleting any potential duplicate files in backup...")));
                    string com;
                    string ret;
                    foreach (string info in pkglist)
                    {
                        FileInfo PKGNAme = new FileInfo(info);
                        com = "ps3xport.exe ExtractPSID ./ psid.bin SetPSID psid.bin DeletePath ./ /dev_hdd0/game/" + PKGNAme.Name + "/";
                        ret = CMD(com);
                    }
                    File.Delete("out.txt");
                    Tracker.Invoke(new Action(() => log("======Dublicates have been cleared=======")));
                    #endregion
                    #region//Install Custom PKG Files
                    this.notifyIcon1.ShowBalloonTip(0x7d0, "PeXploit", "Installing Pkg(s)", ToolTipIcon.Info);
                    Tracker.Invoke(new Action(() => log("Installing PKG(s) files...")));
                    Tracker.Invoke(new Action(() => log("This May Take A While ...")));
                    com = "ps3xport.exe ExtractPSID ./ psid.bin SetPSID psid.bin Add ./ CustomEnvoirment";
                    ret = CMD(com);
                    while (File.Exists(Application.StartupPath + "\\archive_00.tmp"))
                    {
                        Tracker.Invoke(new Action(() => log("Busy.......")));
                        Thread.Sleep(1000);
                    }
                    Tracker.Invoke(new Action(() => log("================PKG(s) Installed============= ")));
                    File.Delete("out.txt");
                    #endregion
                    #region//Copy backup files back to actual backup

                    Tracker.Invoke(new Action(() => log("Moving backup files from working directory...")));
                    //archive 
                    if (File.Exists(dirPath + "/archive.dat"))
                    {
                        if (backupdata == true)
                        {
                            if (File.Exists(dirPath + "/archive.dat.bak"))
                                File.Delete(dirPath + "/archive.dat.bak");
                            Tracker.Invoke(new Action(() => log("Checking archive.dat")));
                            File.Copy(dirPath + "/archive.dat", dirPath + "/archive.dat.bak", true);
                        }
                        File.Delete(dirPath + "/archive.dat");
                    }
                    //archive0
                    for (int i = 0; i <= 9; i++)
                    {
                        if (File.Exists(dirPath + "/archive_0" + i + ".dat"))
                        {
                            if (backupdata == true)
                            {
                                if (File.Exists(dirPath + "/archive_0" + i + ".dat.bak"))
                                    File.Delete(dirPath + "/archive_0" + i + ".dat.bak");
                                Tracker.Invoke(new Action(() => log("Checking Archive_0" + i + ".dat")));
                                File.Copy(dirPath + "/archive_0" + i + ".dat", dirPath + "/archive_0" + i + ".dat.bak", true);
                            }
                            File.Delete(dirPath + "/archive_0" + i + ".dat");
                        }
                    }
                    //archive00
                    for (int i = 10; i <= 99; i++)
                    {
                        if (File.Exists(dirPath + "/archive_" + i + ".dat"))
                        {
                            if (backupdata == true)
                            {
                                if (File.Exists(dirPath + "/archive_" + i + ".dat.bak"))
                                    File.Delete(dirPath + "/archive_" + i + ".dat.bak");
                                Tracker.Invoke(new Action(() => log("Checking Archive_" + i + ".dat")));
                                File.Copy(dirPath + "/archive_" + i + ".dat", dirPath + "/archive_" + i + ".dat.bak", true);
                            }
                            File.Delete(dirPath + "/archive_" + i + ".dat");
                        }
                    }
                    if (backupdata == true)
                        Tracker.Invoke(new Action(() => log("========Archive Passed Checks========")));
                    #endregion
                    #region //copy archive
                    Tracker.Invoke(new Action(() => log("Copying Archive")));
                    File.Copy(Application.StartupPath + "\\archive.dat", dirPath + "/archive.dat");
                    for (int i = 0; i <= 9; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive_0" + i + ".dat"))
                        {
                            Tracker.Invoke(new Action(() => log("Copying Archive_0" + i + "")));
                            File.Copy(Application.StartupPath + "\\archive_0" + i + ".dat", dirPath + "/archive_0" + i + ".dat");
                        }
                    }
                    for (int i = 10; i <= 99; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive_" + i + ".dat"))
                        {
                            Tracker.Invoke(new Action(() => log("Copying Archive_" + i + "")));
                            File.Copy(Application.StartupPath + "\\archive_" + i + ".dat", dirPath + "/archive_" + i + ".dat");
                        }
                    }
                    Tracker.Invoke(new Action(() => log("=======Archive Completed ======")));
                    #endregion


                    #region//Step 9 - Remove files from working directory
                    Tracker.Invoke(new Action(() => log("Deleting final files from working directory...")));
                    if (File.Exists("psid.bin"))
                        File.Delete("psid.bin");
                    if (Directory.Exists(Application.StartupPath + "\\exdata"))
                        Directory.Delete(Application.StartupPath + "\\exdata", true);
                    if (Directory.Exists(Application.StartupPath + "\\mms"))
                        Directory.Delete(Application.StartupPath + "\\mms", true);
                    for (int i = 0; i <= 9; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive_0" + i + ".tmp"))
                            File.Delete(Application.StartupPath + "\\archive_0" + i + ".tmp");
                    }
                    for (int i = 10; i <= 99; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive_" + i + ".tmp"))
                            File.Delete(Application.StartupPath + "\\archive_" + i + ".tmp");
                    }
                    for (int i = 0; i <= 9; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive2_0" + i + ".tmp"))
                            File.Delete(Application.StartupPath + "\\archive2_0" + i + ".tmp");
                    }
                    for (int i = 10; i <= 99; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive2_" + i + ".tmp"))
                            File.Delete(Application.StartupPath + "\\archive2_" + i + ".tmp");
                    }
                    if (Directory.Exists(Application.StartupPath + "\\CustomEnvoirment"))
                        Directory.Delete(Application.StartupPath + "\\CustomEnvoirment", true);
                    try
                    {
                        if (Directory.Exists(Application.StartupPath + @"\\game_pkg"))
                            Directory.Delete(Application.StartupPath + @"\\game_pkg", true);
                    }
                    catch { }

                    string path = Application.StartupPath;
                    try
                    {
                        enumerable = Directory.EnumerateFiles(path, "*.DEC", SearchOption.AllDirectories);
                        foreach (string str4 in enumerable)
                        {
                            FileInfo decdelete = new FileInfo(str4);
                            Tracker.Invoke(new Action(() => log("Deleting " + decdelete.Name)));
                            File.Delete(str4);
                        }
                    }
                    catch
                    {
                    }
                    try
                    {
                        enumerable = Directory.EnumerateFiles(path, "*.pkg", SearchOption.AllDirectories);
                        foreach (string str4 in enumerable)
                        {
                            FileInfo pkgdelete = new FileInfo(str4);
                            Tracker.Invoke(new Action(() => log("Deleting " + pkgdelete.Name)));
                            File.Delete(str4);
                        }
                    }
                    catch
                    {
                    }
                    try
                    {
                        enumerable = Directory.EnumerateFiles(path, "*.bak", SearchOption.AllDirectories);
                        foreach (string str4 in enumerable)
                        {
                            FileInfo pkgdelete = new FileInfo(str4);
                            Tracker.Invoke(new Action(() => log("Deleting " + pkgdelete.Name)));
                            File.Delete(str4);
                        }
                    }
                    catch
                    {
                    }
                    this.notifyIcon1.ShowBalloonTip(0x7d, "PeXploit", "PKG(s) Injected", ToolTipIcon.Info);
                    SystemSounds.Beep.Play();
                    MessageBox.Show("Complete.\r\nBackup saved to " + dirPath + "\n Restore Your Backup");
                    progressBar1.Invoke(new Action(() => progressBar1.Visible = false));
                }
                    #endregion

                #endregion << PeXploit PKG(s) >>

                #region << PKG_VIEW >>
                else if (radioButton3.Checked == true)//pkg_view extracted
                {
                    Tracker.Invoke(new Action(() => log("Copying important backup data to working directory...This May Take Some Time")));
                    Tracker.Invoke(new Action(() => log("Cleaning Up Files If Any Are Found")));
                    string exdata = Application.StartupPath + @"\\exdata\\dev_hdd0\\home\\" + usernum + "\\exdata"; //usernumber and exdata directory
                    #region //Step 3 - Settup Directories so we can add all the info needed well anything u want really

                    Tracker.Invoke(new Action(() => log("Setting up directories..")));
                    Tracker.Invoke(new Action(() => log("Creating Custom Environment..")));

                    string dir = Application.StartupPath + "\\CustomEnvoirment"; //start building the path could propebly do it like below

                    string xDPxdir = Application.StartupPath + "\\CustomEnvoirment\\dev_hdd0\\game\\XDPX00008"; //dont know why sometimes gives a corrupt data on the xmb ? but makes a nice icon in game utility

                    string mms = Application.StartupPath + "\\CustomEnvoirment"; //build for recovery rebuild but started to use it for more than just the recovery rebuild

                    string restore = Application.StartupPath + "\\db.err"; //if u know code ull see what this does later
                    #endregion
                    FileInfo fi = new FileInfo(txtBack.Text); //info from the backup folder 
                    string dirPath = fi.Directory.FullName.Replace("\\", "/"); //Ensure a working directory
                    #region //Build The Directory
                    if (!Directory.Exists(dir))
                        Directory.CreateDirectory(dir);
                    dir += "\\dev_hdd0";
                    if (!Directory.Exists(dir))
                        Directory.CreateDirectory(dir);
                    dir += "\\game";
                    if (!Directory.Exists(dir))
                        Directory.CreateDirectory(dir);

                    if (!Directory.Exists(mms))
                        Directory.CreateDirectory(mms);
                    mms += "\\dev_hdd0";
                    if (!Directory.Exists(mms))
                        Directory.CreateDirectory(mms);
                    mms += "\\mms";
                    if (!Directory.Exists(mms))
                        Directory.CreateDirectory(mms);
                    #endregion
                    //Cleanup Could Have Been Done Another Way i Guess But I Wanted To Ensure That This Part is fullproof 
                    //archive 15 ? 1arch = 4gb 14 = 60gb ?
                    //so if i add 30arhives means 120 gb x2 for archive and archive2 = 320gb standard ps3 hdd size
                    //soo if archive 99 = 4gb each == 396gb *2 for archive2 = 792GB +8GBreally why would u need more ???
                    #region //Check And Delete archive.dat if it exists
                    if (File.Exists(Application.StartupPath + "\\archive.dat"))
                        File.Delete(Application.StartupPath + "\\archive.dat");
                    for (int i = 0; i <= 9; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive_0" + i + ".dat"))
                            File.Delete(Application.StartupPath + "\\archive_0" + i + ".dat");
                    }
                    for (int i = 10; i <= 99; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive_" + i + ".dat"))
                            File.Delete(Application.StartupPath + "\\archive_" + i + ".dat");
                    }


                    #endregion//end for 30 archives
                    #region //start deleting backups if there are any

                    for (int i = 0; i <= 9; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive_0" + i + ".bak"))
                            File.Delete(Application.StartupPath + "\\archive_0" + i + ".bak");
                    }
                    for (int i = 10; i <= 99; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive_" + i + ".bak"))
                            File.Delete(Application.StartupPath + "\\archive_" + i + ".bak");
                    }

                    #endregion//end backups archive_00
                    #region //archive.bak

                    if (File.Exists(Application.StartupPath + "\\archive.bak"))
                        File.Delete(Application.StartupPath + "\\archive.bak");


                    #endregion
                    #region //tmp file check
                    for (int i = 0; i <= 9; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive_0" + i + ".tmp"))
                            File.Delete(Application.StartupPath + "\\archive_0" + i + ".tmp");
                    }
                    for (int i = 10; i <= 99; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive_" + i + ".tmp"))
                            File.Delete(Application.StartupPath + "\\archive_" + i + ".tmp");
                    }
                    #endregion
                    #region//SFO Check
                    foreach (string pkglocation in pkglist)
                    {
                        Tracker.Invoke(new Action(() => log("Adding " + new DirectoryInfo(pkglocation).Name + " To PeXploit")));
                        PARAM_SFO para = new PARAM_SFO(pkglocation + "\\PARAM.SFO");
                        TitleID = para.TitleID;

                        //if (File.Exists(dir + "\\" + TitleID + "\\PARAM.SFO") == true)
                        //{
                        //    if (File.Exists(pkglocation + "\\PARAM.SFO") == true)
                        //    {
                        //        try
                        //        {
                        //            File.Copy(pkglocation + "\\PARAM.SFO", pkglocation + "\\PARAM.SFO.Bak");
                        //            File.Delete(pkglocation + "\\PARAM.SFO");
                        //        }
                        //        catch (Exception ex)
                        //        {

                        //        }
                        //    }
                        //}

                        DirectoryCopy(pkglocation, dir + "\\" + TitleID, true);
                    }
                    #endregion
                    #region //check for param.sfo c00
                    try
                    {
                        foreach (string pn in pkglist)
                        {
                            string dirktpkg = dir + "\\" + new DirectoryInfo(pn).Name;
                            if (File.Exists(dirktpkg + "\\C00\\PARAM.SFO"))
                            {
                                using (var fs = new FileStream(dirktpkg + "\\C00\\PARAM.SFO",
                                        FileMode.Open,
                                        FileAccess.ReadWrite))
                                {
                                    if (File.Exists(Application.StartupPath + "\\PARAM.SFO"))
                                        File.Delete(Application.StartupPath + "\\PARAM.SFO");
                                    File.Copy(dirktpkg + "\\C00\\PARAM.SFO", Application.StartupPath + "\\PARAM.SFO");
                                    Tracker.Invoke(new Action(() => log("Retrieving CONTENT ID ....")));
                                    PARAM_SFO para = new PARAM_SFO(Application.StartupPath + "\\PARAM.SFO");
                                    TitleID = para.ContentID;
                                    Tracker.Invoke(new Action(() => log("Converting " + para.TitleID + " To Full")));
                                    scan_files();
                                    File.Delete(Application.StartupPath + "\\PARAM.SFO");
                                    //string command = "edat-license.exe " + TitleID;
                                    //string retur = CMD(command);
                                    File.Delete(Application.StartupPath + "\\out.txt");
                                    if (!Directory.Exists(exdata))
                                        Directory.CreateDirectory(exdata);
                                    Tracker.Invoke(new Action(() => log("Conversion Complete And Adding To Enviroment")));
                                    try
                                    {
                                        DirectoryCopy(Application.StartupPath + "\\edats\\", exdata, true);
                                    }
                                    catch (Exception ex)
                                    {

                                    }
                                    Tracker.Invoke(new Action(() => log(".....")));

                                    DirectoryCopy(Application.StartupPath + "\\exdata", Application.StartupPath + "\\mms\\", true);
                                    if (File.Exists(Application.StartupPath + "\\" + TitleID))
                                        File.Delete(Application.StartupPath + "\\" + TitleID);
                                    //}
                                    File.Delete(Application.StartupPath + "\\out.txt");
                                    Tracker.Invoke(new Action(() => log("Done")));
                                }
                            }
                    #endregion
                            #region//Check non-c00
                            else if (File.Exists(dir + "\\" + new DirectoryInfo(pn).Name + "\\PARAM.SFO"))
                            {
                                using (var fs = new FileStream(dir + "\\PARAM.SFO",
                                        FileMode.Open,
                                        FileAccess.ReadWrite))
                                {
                                    //Copy The Param TO Main Directory TO Execute EDAT Creation
                                    File.Copy(dir + "\\PARAM.SFO", Application.StartupPath + "\\PARAM.SFO");
                                    //Invoke The Listbox
                                    Tracker.Invoke(new Action(() => log("Retrieving CONTENT ID ....")));

                                    //Read The SFO Thanks Jappi88
                                    PARAM_SFO para = new PARAM_SFO(Application.StartupPath + "\\PARAM.SFO");
                                    TitleID = para.ContentID;
                                    Tracker.Invoke(new Action(() => log("Converting " + para.TitleID + " To Full")));

                                    //Scan The Files TO Search For The Edat And Create am SFO Out Of That
                                    scan_files();

                                    //DELETE Non-Important Files
                                    if (File.Exists(Application.StartupPath + "\\PARAM.SFO"))
                                        File.Delete(Application.StartupPath + "\\PARAM.SFO");
                                    if (File.Exists(Application.StartupPath + "\\out.txt"))
                                        File.Delete(Application.StartupPath + "\\out.txt");
                                    //Check OR Create Directory
                                    if (!Directory.Exists(exdata))
                                        Directory.CreateDirectory(exdata);
                                    Tracker.Invoke(new Action(() => log("Conversion Completed And Adding To Enviroment")));

                                    //try And Catch Directory Copy
                                    try
                                    {
                                        DirectoryCopy(Application.StartupPath + "\\edats\\", exdata, true);
                                    }
                                    catch (Exception ex)
                                    {

                                    }
                                    Tracker.Invoke(new Action(() => log(".....")));
                                    DirectoryCopy(Application.StartupPath + "\\exdata", Application.StartupPath + "\\mms\\", true);
                                    //If Exists Delete The Old Method 
                                    if (File.Exists(Application.StartupPath + "\\" + TitleID))
                                        File.Delete(Application.StartupPath + "\\" + TitleID);
                                    if (File.Exists(Application.StartupPath + "\\out.txt"))
                                        File.Delete(Application.StartupPath + "\\out.txt");
                                    Tracker.Invoke(new Action(() => log("Done")));
                                }

                            }
                        }
                    }
                    catch (Exception ex)
                    {

                    }
                            #endregion
                    Tracker.Invoke(new Action(() => log("Copying archive.dat ....")));
                    File.Copy(dirPath + "/archive.dat", Application.StartupPath + "\\archive.dat");
                    #region //copy archive.dat
                    for (int i = 0; i <= 9; i++)
                    {
                        if (File.Exists(dirPath + "/archive_0" + i + ".dat"))
                        {
                            Tracker.Invoke(new Action(() => log("Copying archive_0" + i + ".dat ....")));
                            File.Copy(dirPath + "/archive_0" + i + ".dat", Application.StartupPath + "\\archive_0" + i + ".dat");
                        }
                    }
                    for (int i = 10; i <= 99; i++)
                    {
                        if (File.Exists(dirPath + "/archive_" + i + ".dat"))
                        {
                            Tracker.Invoke(new Action(() => log("Copying archive_" + i + ".dat ....")));
                            File.Copy(dirPath + "/archive_" + i + ".dat", Application.StartupPath + "\\archive_" + i + ".dat");
                        }
                    }

                    #endregion
                    Tracker.Invoke(new Action(() => log("=======All Archives Coppied=========")));
                    Tracker.Invoke(new Action(() => log("Adding Files To Environment ....")));
                    #region Batch Install edats
                    scan_files();
                    IEnumerable<string> enumerable;
                    string edatsf = Application.StartupPath + @"\edats\";
                    try
                    {
                        enumerable = Directory.EnumerateFiles(edatsf, "*.edat", SearchOption.AllDirectories);
                        foreach (string str4 in enumerable)
                        {
                            FileInfo edatname = new FileInfo(str4);
                            if (!Directory.Exists(exdata))
                                Directory.CreateDirectory(exdata);
                            File.Move(str4, exdata + @"\\" + edatname.Name);
                        }
                    }
                    catch
                    {
                    }
                    #endregion
                    #region //custom edats
                    if (txtEdat.Text != "")
                    {
                        foreach (string line in edats)
                        {
                            Tracker.Invoke(new Action(() => log("Adding " + System.IO.Path.GetFileName(line))));
                            if (!Directory.Exists(exdata))
                                Directory.CreateDirectory(exdata);
                            File.Copy(line, exdata + "\\" + System.IO.Path.GetFileName(line), true);
                        }
                        Tracker.Invoke(new Action(() => log("========All Edat(s) Added=========")));
                    }
                    #endregion
                    File.Copy(restore, mms + "\\db.err");
                    if (Directory.Exists(Application.StartupPath + "\\exdata"))
                    {
                        DirectoryCopy(Application.StartupPath + "\\exdata", Application.StartupPath + "\\CustomEnvoirment\\", true);
                    }

                    #region //Check for any existing duplicates and delete them from the backup
                    Tracker.Invoke(new Action(() => log("Deleting any potential duplicate files in backup...")));
                    string com;
                    string ret;
                    foreach (string info in pkglist)
                    {
                        FileInfo PKGNAme = new FileInfo(info);
                        com = "ps3xport.exe ExtractPSID ./ psid.bin SetPSID psid.bin DeletePath ./ /dev_hdd0/game/" + PKGNAme.Name + "/";
                        ret = CMD(com);
                    }
                    File.Delete("out.txt");
                    Tracker.Invoke(new Action(() => log("======Dublicates have been cleared=======")));
                    #endregion
                    #region//Install Custom PKG Files
                    this.notifyIcon1.ShowBalloonTip(0x7d0, "PeXploit", "Installing Pkg(s)", ToolTipIcon.Info);
                    Tracker.Invoke(new Action(() => log("Installing PKG(s) files...")));
                    Tracker.Invoke(new Action(() => log("This May Take A While ...")));
                    com = "ps3xport.exe ExtractPSID ./ psid.bin SetPSID psid.bin Add ./ CustomEnvoirment";
                    ret = CMD(com);
                    while (File.Exists(Application.StartupPath + "\\archive_00.tmp"))
                    {
                        Tracker.Invoke(new Action(() => log("Busy.......")));
                        Thread.Sleep(1000);
                    }
                    Tracker.Invoke(new Action(() => log("================PKG(s) Installed============= ")));
                    File.Delete("out.txt");
                    #endregion
                    #region//Copy backup files back to actual backup

                    Tracker.Invoke(new Action(() => log("Moving backup files from working directory...")));
                    //archive 
                    if (File.Exists(dirPath + "/archive.dat"))
                    {
                        if (backupdata == true)
                        {
                            if (File.Exists(dirPath + "/archive.dat.bak"))
                                File.Delete(dirPath + "/archive.dat.bak");
                            Tracker.Invoke(new Action(() => log("Checking archive.dat")));
                            File.Copy(dirPath + "/archive.dat", dirPath + "/archive.dat.bak", true);
                        }
                        File.Delete(dirPath + "/archive.dat");
                    }
                    //archive0
                    for (int i = 0; i <= 9; i++)
                    {
                        if (File.Exists(dirPath + "/archive_0" + i + ".dat"))
                        {
                            if (backupdata == true)
                            {
                                if (File.Exists(dirPath + "/archive_0" + i + ".dat.bak"))
                                    File.Delete(dirPath + "/archive_0" + i + ".dat.bak");
                                Tracker.Invoke(new Action(() => log("Checking Archive_0" + i + ".dat")));
                                File.Copy(dirPath + "/archive_0" + i + ".dat", dirPath + "/archive_0" + i + ".dat.bak", true);
                            }
                            File.Delete(dirPath + "/archive_0" + i + ".dat");
                        }
                    }
                    //archive00
                    for (int i = 10; i <= 99; i++)
                    {
                        if (File.Exists(dirPath + "/archive_" + i + ".dat"))
                        {
                            if (backupdata == true)
                            {
                                if (File.Exists(dirPath + "/archive_" + i + ".dat.bak"))
                                    File.Delete(dirPath + "/archive_" + i + ".dat.bak");
                                Tracker.Invoke(new Action(() => log("Checking Archive_" + i + ".dat")));
                                File.Copy(dirPath + "/archive_" + i + ".dat", dirPath + "/archive_" + i + ".dat.bak", true);
                            }
                            File.Delete(dirPath + "/archive_" + i + ".dat");
                        }
                    }
                    if (backupdata == true)
                        Tracker.Invoke(new Action(() => log("========Archive Passed Checks========")));
                    #endregion
                    #region //copy archive
                    Tracker.Invoke(new Action(() => log("Copying Archive")));
                    File.Copy(Application.StartupPath + "\\archive.dat", dirPath + "/archive.dat");
                    for (int i = 0; i <= 9; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive_0" + i + ".dat"))
                        {
                            Tracker.Invoke(new Action(() => log("Copying Archive_0" + i + "")));
                            File.Copy(Application.StartupPath + "\\archive_0" + i + ".dat", dirPath + "/archive_0" + i + ".dat");
                        }
                    }
                    for (int i = 10; i <= 99; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive_" + i + ".dat"))
                        {
                            Tracker.Invoke(new Action(() => log("Copying Archive_" + i + "")));
                            File.Copy(Application.StartupPath + "\\archive_" + i + ".dat", dirPath + "/archive_" + i + ".dat");
                        }
                    }
                    Tracker.Invoke(new Action(() => log("=======Archive Completed ======")));
                    #endregion
                    #region//Step 9 - Remove files from working directory
                    Tracker.Invoke(new Action(() => log("Deleting final files from working directory...")));
                    if (File.Exists("psid.bin"))
                        File.Delete("psid.bin");
                    if (Directory.Exists(Application.StartupPath + "\\exdata"))
                        Directory.Delete(Application.StartupPath + "\\exdata", true);
                    if (Directory.Exists(Application.StartupPath + "\\mms"))
                        Directory.Delete(Application.StartupPath + "\\mms", true);
                    for (int i = 0; i <= 9; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive_0" + i + ".tmp"))
                            File.Delete(Application.StartupPath + "\\archive_0" + i + ".tmp");
                    }
                    for (int i = 10; i <= 99; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive_" + i + ".tmp"))
                            File.Delete(Application.StartupPath + "\\archive_" + i + ".tmp");
                    }
                    for (int i = 0; i <= 9; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive2_0" + i + ".tmp"))
                            File.Delete(Application.StartupPath + "\\archive2_0" + i + ".tmp");
                    }
                    for (int i = 10; i <= 99; i++)
                    {
                        if (File.Exists(Application.StartupPath + "\\archive2_" + i + ".tmp"))
                            File.Delete(Application.StartupPath + "\\archive2_" + i + ".tmp");
                    }
                    if (Directory.Exists(Application.StartupPath + "\\CustomEnvoirment"))
                        Directory.Delete(Application.StartupPath + "\\CustomEnvoirment", true);
                    try
                    {
                        if (Directory.Exists(Application.StartupPath + @"\\game_pkg"))
                            Directory.Delete(Application.StartupPath + @"\\game_pkg", true);
                    }
                    catch { }

                    string path = Application.StartupPath;
                    try
                    {
                        enumerable = Directory.EnumerateFiles(path, "*.DEC", SearchOption.AllDirectories);
                        foreach (string str4 in enumerable)
                        {
                            FileInfo decdelete = new FileInfo(str4);
                            Tracker.Invoke(new Action(() => log("Deleting " + decdelete.Name)));
                            File.Delete(str4);
                        }
                    }
                    catch
                    {
                    }
                    try
                    {
                        enumerable = Directory.EnumerateFiles(path, "*.pkg", SearchOption.AllDirectories);
                        foreach (string str4 in enumerable)
                        {
                            FileInfo pkgdelete = new FileInfo(str4);
                            Tracker.Invoke(new Action(() => log("Deleting " + pkgdelete.Name)));
                            File.Delete(str4);
                        }
                    }
                    catch
                    {
                    }
                    try
                    {
                        enumerable = Directory.EnumerateFiles(path, "*.bak", SearchOption.AllDirectories);
                        foreach (string str4 in enumerable)
                        {
                            FileInfo pkgdelete = new FileInfo(str4);
                            Tracker.Invoke(new Action(() => log("Deleting " + pkgdelete.Name)));
                            File.Delete(str4);
                        }
                    }
                    catch
                    {
                    }
                    this.notifyIcon1.ShowBalloonTip(0x7d, "PeXploit", "PKG(s) Injected", ToolTipIcon.Info);
                    SystemSounds.Beep.Play();
                    MessageBox.Show("Complete.\r\nBackup saved to " + dirPath + "\n Restore Your Backup");
                    progressBar1.Invoke(new Action(() => progressBar1.Visible = false));
                }

                    #endregion
                #endregion << PKG_VIEW >>

            }
            catch (Exception ex)
            {
                MessageBox.Show("An Internal Error Accoured " + ex.Message + " It Has Been Loged", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                System.IO.File.WriteAllText(Application.StartupPath + "\\errorlog.txt", ex.ToString());
            }



        }

        #endregion << Install PKG(s) >>

        #region << MusicPlayer >>

        private void MusicPlayer_DoWork(object sender, DoWorkEventArgs e)
        {
            try
            {
                if (player != null)
                {
                    if (!player._isPlaying)
                    {
                        music = 1;
                        myMod = ModuleLoader.Instance.LoadModule("Main.xm");
                        player.Start();
                    }
                    else
                    {
                        music = 0;
                        player.Stop();
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        #endregion << MusicPlayer >>

        #endregion <<BackgroundWorkers >>

        #region << Var's >>
        //Form Related
        int music = 0; //simple int for 0 music off 1 music on

        public SongModule myMod { get; set; }
        public ModulePlayer player { get; set; }

        string TitleID;
        string usernum; //usernumber from selection
        string[] id; //titelid for pkgdecrypt(debug)
        List<String> pkgID = new List<string>();//to get each package file name
        bool updateavaialable;//updateserveravaialble
        bool playing = false;
        private bool _dragging = false;
        private Point _offset;
        private Point _start_point = new Point(0, 0);
        //Program Related

        #region ps3keys
        private byte[] AesKey = new byte[0x10];
        private byte[] PKGFileKey = new byte[0x10];
        private byte[] PS3AesKey = new byte[] { 0x2e, 0x7b, 0x71, 0xd7, 0xc9, 0xc9, 0xa1, 0x4e, 0xa3, 0x22, 0x1f, 0x18, 0x88, 40, 0xb8, 0xf8 };
        private byte[] PSPAesKey = new byte[] { 7, 0xf2, 0xc6, 130, 0x90, 0xb5, 13, 0x2c, 0x33, 0x81, 0x8d, 0x70, 0x9b, 0x60, 230, 0x2b };
        private uint uiEncryptedFileStartOffset;
        #endregion

        #region PKGRead Debug/Retail

        private string ReadPKGFile(string PKGFileName, FileInfo ini)
        {
            try
            {
                int moltiplicator = 65536;
                byte[] EncryptedData = new byte[AesKey.Length * moltiplicator];
                byte[] DecryptedData = new byte[AesKey.Length * moltiplicator];

                byte[] PKGXorKey = new byte[AesKey.Length];
                byte[] EncryptedFileStartOffset = new byte[4];
                byte[] EncryptedFileLenght = new byte[4];

                Stream PKGReadStream = new FileStream(PKGFileName, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
                BinaryReader brPKG = new BinaryReader(PKGReadStream);

                PKGReadStream.Seek(0x00, SeekOrigin.Begin);
                byte[] pkgMagic = brPKG.ReadBytes(4);
                if (pkgMagic[0x00] != 0x7F || pkgMagic[0x01] != 0x50 || pkgMagic[0x02] != 0x4B || pkgMagic[0x03] != 0x47)
                {
                    MessageBox.Show("ERROR: Selected file isn't a Pkg file.");
                    SystemSounds.Beep.Play();
                    return string.Empty;
                }

                //Finalized byte
                PKGReadStream.Seek(0x04, SeekOrigin.Begin);
                byte pkgFinalized = brPKG.ReadByte();

                if (pkgFinalized != 0x80) //offset is debug
                {

                    lblPackageType.Invoke(new Action(() => lblPackageType.Text = ("Debug Package")));
                    lblPackageType.Invoke(new Action(() => lblPackageType.ForeColor = Color.Red));
                    SystemSounds.Beep.Play();
                    return string.Empty;
                }
                else if (pkgFinalized == 0x80) //ofset is retail
                {
                    lblPackageType.Invoke(new Action(() => lblPackageType.Text = ("Retail Package")));
                    lblPackageType.Invoke(new Action(() => lblPackageType.ForeColor = Color.Blue));
                    return PKGFileName;
                }
                return PKGFileName;
            }
            catch (Exception ex)
            {
                return string.Empty;
            }
        }//Gets Debug Or Retail PKG

        #endregion

        #region PKG Decryption

        #region Files Needed For PKG Decrypt (pkg2edat,rap2rif,rif2rap,sfo2edat)
        private string DecryptPKGFile(string PKGFileName, FileInfo ini)
        {
            try
            {
                int moltiplicator = 65536;
                byte[] EncryptedData = new byte[AesKey.Length * moltiplicator];
                byte[] DecryptedData = new byte[AesKey.Length * moltiplicator];

                byte[] PKGXorKey = new byte[AesKey.Length];
                byte[] EncryptedFileStartOffset = new byte[4];
                byte[] EncryptedFileLenght = new byte[8];

                Stream PKGReadStream = new FileStream(PKGFileName, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
                BinaryReader brPKG = new BinaryReader(PKGReadStream);

                PKGReadStream.Seek(0x00, SeekOrigin.Begin);
                byte[] pkgMagic = brPKG.ReadBytes(4);
                if (pkgMagic[0x00] != 0x7F || pkgMagic[0x01] != 0x50 || pkgMagic[0x02] != 0x4B || pkgMagic[0x03] != 0x47)
                {
                    ResultText("ERROR: Selected file isn't a Pkg file.");
                    SystemSounds.Beep.Play();
                    return string.Empty;
                }

                //Finalized byte
                PKGReadStream.Seek(0x04, SeekOrigin.Begin);
                byte pkgFinalized = brPKG.ReadByte();

                if (pkgFinalized != 0x80)
                {
                    string com = ini.Name;
                    string command = "pkg " + com;
                    CMD(command);
                    if (File.Exists(Application.StartupPath + @"\\PARAM.SFO") == true)
                    {
                        string dir = Application.StartupPath + @"\CustomEnvoirment";
                        if (!Directory.Exists(dir))
                            Directory.CreateDirectory(dir);
                        dir += "\\dev_hdd0";
                        if (!Directory.Exists(dir))
                            Directory.CreateDirectory(dir);
                        dir += "\\game";
                        if (!Directory.Exists(dir))
                            Directory.CreateDirectory(dir);
                        PARAM_SFO parrameters = new PARAM_SFO(Application.StartupPath + @"\\PARAM.SFO");
                        string pkgid = parrameters.TitleID;
                        pkgID.Add(pkgid);
                        string pkgdir = dir + "\\" + pkgid;
                        Directory.CreateDirectory(pkgdir);
                        if (Directory.Exists(Application.StartupPath + @"\\USRDIR") == true)
                            Directory.Move(Application.StartupPath + @"\\USRDIR", pkgdir + "\\USRDIR");
                        if (Directory.Exists(Application.StartupPath + @"\\TROPDIR") == true)
                            Directory.Move(Application.StartupPath + @"\\TROPDIR", pkgdir + "\\TROPDIR");
                        if (File.Exists(Application.StartupPath + @"\\PARAM.SFO") == true)
                            File.Move(Application.StartupPath + @"\\PARAM.SFO", pkgdir + "\\PARAM.SFO");
                        if (File.Exists(Application.StartupPath + @"\\ICON0.PNG") == true)
                            File.Move(Application.StartupPath + @"\\ICON0.PNG", pkgdir + "\\ICON0.PNG");
                        if (File.Exists(Application.StartupPath + @"\\PIC1.PNG") == true)
                            File.Move(Application.StartupPath + @"\\PIC1.PNG", pkgdir + "\\PIC1.PNG");
                        if (File.Exists(Application.StartupPath + @"\\PS3LOGO.DAT") == true)
                            if (File.Exists(Application.StartupPath + @"\\PARAM.HIP") == true)
                                File.Move(Application.StartupPath + @"\\PARAM.HIP", pkgdir + "\\PARAM.HIP");
                        if (File.Exists(Application.StartupPath + @"\\PS3LOGO.DAT") == true)
                            File.Move(Application.StartupPath + @"\\PS3LOGO.DAT", pkgdir + "\\PS3LOGO.DAT");
                    }

                    SystemSounds.Beep.Play();
                    return string.Empty;
                }

                //PKG Type PSP/PS3
                PKGReadStream.Seek(0x07, SeekOrigin.Begin);
                byte pkgType = brPKG.ReadByte();

                switch (pkgType)
                {
                    case 0x01:
                        //PS3
                        AesKey = PS3AesKey;
                        break;

                    case 0x02:
                        //PSP
                        AesKey = PSPAesKey;
                        break;

                    default:
                        ResultText("ERROR: Selected pkg isn't Valid.");
                        SystemSounds.Beep.Play();
                        return string.Empty;
                }

                //0x24 Store the start Address of the encrypted file to decrypt
                PKGReadStream.Seek(0x24, SeekOrigin.Begin);
                pkgType = brPKG.ReadByte();
                EncryptedFileStartOffset = brPKG.ReadBytes((int)EncryptedFileStartOffset.Length);
                Array.Reverse(EncryptedFileStartOffset);
                uiEncryptedFileStartOffset = BitConverter.ToUInt32(EncryptedFileStartOffset, 0);

                //0x1C Store the length of the whole pkg file

                //0x2C Store the length of the encrypted file to decrypt
                PKGReadStream.Seek(0x2C, SeekOrigin.Begin);
                pkgType = brPKG.ReadByte();
                EncryptedFileLenght = brPKG.ReadBytes((int)EncryptedFileLenght.Length);
                Array.Reverse(EncryptedFileLenght);
                uint uiEncryptedFileLenght = BitConverter.ToUInt32(EncryptedFileLenght, 0);

                //0x70 Store the PKG file Key.
                PKGReadStream.Seek(0x70, SeekOrigin.Begin);
                PKGFileKey = brPKG.ReadBytes(16);
                byte[] incPKGFileKey = new byte[16];
                Array.Copy(PKGFileKey, incPKGFileKey, PKGFileKey.Length);

                //the "file" key at 0x70 have to be encrypted with a "global AES key" to generate the "xor" key
                //PSP uses CipherMode.ECB, PaddingMode.None that doesn't need IV
                PKGXorKey = AESEngine.Encrypt(PKGFileKey, AesKey, AesKey, CipherMode.ECB, PaddingMode.None);

                // Pieces calculation
                double division = (double)uiEncryptedFileLenght / (double)AesKey.Length;
                UInt64 pieces = (UInt64)Math.Floor(division);
                UInt64 mod = (UInt64)uiEncryptedFileLenght / (UInt64)AesKey.Length;
                if (mod > 0)
                    pieces += 1;

                if (File.Exists(PKGFileName + ".Dec"))
                {
                    File.Delete(PKGFileName + ".Dec");
                }

                //Write File
                FileStream DecryptedFileWriteStream = new FileStream(PKGFileName + ".Dec", FileMode.CreateNew, FileAccess.ReadWrite, FileShare.ReadWrite);
                BinaryWriter bwDecryptedFile = new BinaryWriter(DecryptedFileWriteStream);

                //Put the read pointer on the encrypted starting point.
                PKGReadStream.Seek((int)uiEncryptedFileStartOffset, SeekOrigin.Begin);

                // Pieces calculation
                double filedivision = (double)uiEncryptedFileLenght / (double)(AesKey.Length * moltiplicator);
                UInt64 filepieces = (UInt64)Math.Floor(filedivision);
                UInt64 filemod = (UInt64)uiEncryptedFileLenght % (UInt64)(AesKey.Length * moltiplicator);
                if (filemod > 0)
                    filepieces += 1;

                Application.DoEvents();

                for (UInt64 i = 0; i < filepieces; i++)
                {
                    //If we have a mod and this is the last piece then...
                    if ((filemod > 0) && (i == (filepieces - 1)))
                    {
                        EncryptedData = new byte[filemod];
                        DecryptedData = new byte[filemod];
                    }

                    //Read 16 bytes of Encrypted data
                    EncryptedData = brPKG.ReadBytes(EncryptedData.Length);

                    //In order to retrieve a fast AES Encryption we pre-Increment the array
                    byte[] PKGFileKeyConsec = new byte[EncryptedData.Length];
                    byte[] PKGXorKeyConsec = new byte[EncryptedData.Length];

                    for (long pos = 0; pos < EncryptedData.Length; pos += AesKey.Length)
                    {
                        Array.Copy(incPKGFileKey, 0, PKGFileKeyConsec, pos, PKGFileKey.Length);

                        IncrementArray(ref incPKGFileKey, PKGFileKey.Length - 1);
                    }

                    //the incremented "file" key have to be encrypted with a "global AES key" to generate the "xor" key
                    //PSP uses CipherMode.ECB, PaddingMode.None that doesn't need IV
                    PKGXorKeyConsec = AESEngine.Encrypt(PKGFileKeyConsec, AesKey, AesKey, CipherMode.ECB, PaddingMode.None);

                    //XOR Decrypt and save every 16 bytes of data:
                    DecryptedData = XOREngine.XOR(EncryptedData, 0, PKGXorKeyConsec.Length, PKGXorKeyConsec);

                    Application.DoEvents();

                    bwDecryptedFile.Write(DecryptedData);
                }
                Application.DoEvents();

                DecryptedFileWriteStream.Close();
                bwDecryptedFile.Close();

                return PKGFileName + ".Dec";
            }
            catch (Exception ex)
            {
                ResultText("ERROR: An error occured during the decrypting process ");
                SystemSounds.Beep.Play();
                return string.Empty;
            }
        }

        private Boolean IncrementArray(ref byte[] sourceArray, int position)
        {
            if (sourceArray[position] == 0xFF)
            {
                if (position != 0)
                {
                    if (IncrementArray(ref sourceArray, position - 1))
                    {
                        sourceArray[position] = 0x00;
                        return true;
                    }
                    else return false; //Maximum reached yet
                }
                else return false; //Maximum reached yet
            }
            else
            {
                sourceArray[position] += 0x01;
                return true;
            }
        }

        public static string HexStringToAscii(string HexString, bool cleanEndOfString)
        {
            try
            {
                string StrValue = "";
                // While there's still something to convert in the hex string
                while (HexString.Length > 0)
                {
                    // Use ToChar() to convert each ASCII value (two hex digits) to the actual character
                    StrValue += System.Convert.ToChar(System.Convert.ToUInt32(HexString.Substring(0, 2), 16)).ToString();

                    // Remove from the hex object the converted value
                    HexString = HexString.Substring(2, HexString.Length - 2);
                }
                // Clean String
                if (cleanEndOfString)
                    StrValue = StrValue.Replace("\0", "");

                return StrValue;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public static string ByteArrayToAscii(byte[] ByteArray, int startPos, int length, bool cleanEndOfString)
        {
            byte[] byteArrayPhrase = new byte[length];
            Array.Copy(ByteArray, startPos, byteArrayPhrase, 0, byteArrayPhrase.Length);
            string hexPhrase = ByteArrayToHexString(byteArrayPhrase);
            return HexStringToAscii(hexPhrase, true);
        }

        public static string ByteArrayToHexString(byte[] ByteArray)
        {
            string HexString = "";
            for (int i = 0; i < ByteArray.Length; ++i)
                HexString += ByteArray[i].ToString("X2"); // +" ";
            return HexString;
        }

        private byte[] DecryptData(int dataSize, long dataRelativeOffset, long pkgEncryptedFileStartOffset, byte[] AesKey, Stream encrPKGReadStream, BinaryReader brEncrPKG)
        {
            int size = dataSize % 16;
            if (size > 0)
                size = ((dataSize / 16) + 1) * 16;
            else
                size = dataSize;

            byte[] EncryptedData = new byte[size];
            byte[] DecryptedData = new byte[size];
            byte[] PKGFileKeyConsec = new byte[size];
            byte[] PKGXorKeyConsec = new byte[size];
            byte[] incPKGFileKey = new byte[PKGFileKey.Length];
            Array.Copy(PKGFileKey, incPKGFileKey, PKGFileKey.Length);

            encrPKGReadStream.Seek(dataRelativeOffset + pkgEncryptedFileStartOffset, SeekOrigin.Begin);
            EncryptedData = brEncrPKG.ReadBytes(size);

            for (int pos = 0; pos < dataRelativeOffset; pos += 16)
            {
                IncrementArray(ref incPKGFileKey, PKGFileKey.Length - 1);
            }

            for (int pos = 0; pos < size; pos += 16)
            {
                Array.Copy(incPKGFileKey, 0, PKGFileKeyConsec, pos, PKGFileKey.Length);

                IncrementArray(ref incPKGFileKey, PKGFileKey.Length - 1);
            }

            //the incremented "file" key have to be encrypted with a "global AES key" to generate the "xor" key
            //PSP uses CipherMode.ECB, PaddingMode.None that doesn't need IV
            PKGXorKeyConsec = AESEngine.Encrypt(PKGFileKeyConsec, AesKey, AesKey, CipherMode.ECB, PaddingMode.None);

            //XOR Decrypt and save every 16 bytes of data:
            DecryptedData = XOREngine.XOR(EncryptedData, 0, PKGXorKeyConsec.Length, PKGXorKeyConsec);

            return DecryptedData;
        }

        private Boolean ExtractFiles(string decryptedPKGFileName, string encryptedPKGFileName, FileInfo line)
        {
            try
            {
                int twentyMb = 1024 * 1024 * 20;
                UInt32 ExtractedFileOffset = 0;
                UInt32 ExtractedFileSize = 0;
                UInt32 OffsetShift = 0;
                long positionIdx = 0;

                String WorkDir = "";
                id = line.Name.Trim(new[] { '[', ']' }).Split('-');
                pkgID.Add(id[0].Replace("]", ""));
                WorkDir = Application.StartupPath + @"\CustomEnvoirment\dev_hdd0\game\" + id[0].Replace("]", "");
                if (Directory.Exists(WorkDir))
                {
                    Directory.Delete(WorkDir, true);
                    System.Threading.Thread.Sleep(100);

                    Directory.CreateDirectory(WorkDir);
                    System.Threading.Thread.Sleep(100);
                }

                byte[] FileTable = new byte[320000];
                byte[] dumpFile;
                byte[] sdkVer = new byte[8];
                byte[] firstFileOffset = new byte[4];
                byte[] firstNameOffset = new byte[4];
                byte[] fileNr = new byte[4];
                byte[] isDir = new byte[4];
                byte[] Offset = new byte[4];
                byte[] Size = new byte[4];
                byte[] NameOffset = new byte[4];
                byte[] NameSize = new byte[4];
                byte[] Name = new byte[32];
                byte[] bootMagic = new byte[8];
                byte contentType = 0;
                byte fileType = 0;
                bool isFile = false;

                Stream decrPKGReadStream = new FileStream(decryptedPKGFileName, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
                BinaryReader brDecrPKG = new BinaryReader(decrPKGReadStream);

                Stream encrPKGReadStream = new FileStream(encryptedPKGFileName, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
                BinaryReader brEncrPKG = new BinaryReader(encrPKGReadStream);

                //Read the file Table
                decrPKGReadStream.Seek((long)0, SeekOrigin.Begin);
                FileTable = brDecrPKG.ReadBytes(FileTable.Length);

                positionIdx = 0;

                OffsetShift = 0;   //Shift Relative to os.raw

                Array.Copy(FileTable, 0, firstNameOffset, 0, firstNameOffset.Length);
                Array.Reverse(firstNameOffset);
                uint uifirstNameOffset = BitConverter.ToUInt32(firstNameOffset, 0);

                uint uiFileNr = uifirstNameOffset / 32;

                Array.Copy(FileTable, 12, firstFileOffset, 0, firstFileOffset.Length);
                Array.Reverse(firstFileOffset);
                uint uifirstFileOffset = BitConverter.ToUInt32(firstFileOffset, 0);

                //Read the file Table
                decrPKGReadStream.Seek((long)0, SeekOrigin.Begin);
                FileTable = brDecrPKG.ReadBytes((int)uifirstFileOffset);

                //If number of files is negative then something is wrong...
                if ((int)uiFileNr < 0)
                {
                    ResultText("ERROR: An error occured during the files extraction process cause of a decryption error");
                    SystemSounds.Beep.Play();
                    return false;
                }
                Application.DoEvents();

                //Table:
                //0-3         4-7         8-11        12-15       16-19       20-23       24-27       28-31
                //|name loc | |name size| |   NULL  | |file loc | |  NULL   | |file size| |cont type| |   NULL  |

                for (int ii = 0; ii < (int)uiFileNr; ii++)
                {
                    Array.Copy(FileTable, positionIdx + 12, Offset, 0, Offset.Length);
                    Array.Reverse(Offset);
                    ExtractedFileOffset = BitConverter.ToUInt32(Offset, 0) + OffsetShift;

                    Array.Copy(FileTable, positionIdx + 20, Size, 0, Size.Length);
                    Array.Reverse(Size);
                    ExtractedFileSize = BitConverter.ToUInt32(Size, 0);

                    Array.Copy(FileTable, positionIdx, NameOffset, 0, NameOffset.Length);
                    Array.Reverse(NameOffset);
                    uint ExtractedFileNameOffset = BitConverter.ToUInt32(NameOffset, 0);

                    Array.Copy(FileTable, positionIdx + 4, NameSize, 0, NameSize.Length);
                    Array.Reverse(NameSize);
                    uint ExtractedFileNameSize = BitConverter.ToUInt32(NameSize, 0);

                    contentType = FileTable[positionIdx + 24];
                    fileType = FileTable[positionIdx + 27];

                    Name = new byte[ExtractedFileNameSize];
                    Array.Copy(FileTable, (int)ExtractedFileNameOffset, Name, 0, ExtractedFileNameSize);
                    string ExtractedFileName = ByteArrayToAscii(Name, 0, Name.Length, true);

                    //Write Directory
                    if (!Directory.Exists(WorkDir))
                    {
                        Directory.CreateDirectory(WorkDir);
                        System.Threading.Thread.Sleep(100);
                    }

                    FileStream ExtractedFileWriteStream = null;

                    //File / Directory
                    if ((fileType == 0x04) && (ExtractedFileSize == 0x00))
                        isFile = false;
                    else
                        isFile = true;

                    //contentType == 0x90 = PSP file/dir
                    if (contentType == 0x90)
                    {
                        string FileDir = WorkDir + "\\" + ExtractedFileName;
                        FileDir = FileDir.Replace("/", "\\");
                        DirectoryInfo FileDirectory = Directory.GetParent(FileDir);

                        if (!Directory.Exists(FileDirectory.ToString()))
                        {
                            Directory.CreateDirectory(FileDirectory.ToString());
                        }
                        ExtractedFileWriteStream = new FileStream(FileDir, FileMode.CreateNew, FileAccess.ReadWrite, FileShare.ReadWrite);
                    }
                    else
                    {
                        //contentType == (0x80 || 0x00) = PS3 file/dir
                        //fileType == 0x01 = NPDRM File
                        //fileType == 0x03 = Raw File
                        //fileType == 0x04 = Directory

                        //Decrypt PS3 Filename
                        byte[] DecryptedData = DecryptData((int)ExtractedFileNameSize, (long)ExtractedFileNameOffset, (long)uiEncryptedFileStartOffset, PS3AesKey, encrPKGReadStream, brEncrPKG);
                        Array.Copy(DecryptedData, 0, Name, 0, ExtractedFileNameSize);
                        ExtractedFileName = ByteArrayToAscii(Name, 0, Name.Length, true);

                        if (!isFile)
                        {
                            //Directory
                            try
                            {
                                if (!Directory.Exists(ExtractedFileName))
                                    Directory.CreateDirectory(WorkDir + "\\" + ExtractedFileName);
                            }
                            catch (Exception ex)
                            {
                                //This should not happen xD
                                ExtractedFileName = ii.ToString() + ".raw";
                                if (!Directory.Exists(ExtractedFileName))
                                    Directory.CreateDirectory(WorkDir + "\\" + ExtractedFileName);
                            }
                        }
                        else
                        {
                            //File
                            try
                            {
                                ExtractedFileWriteStream = new FileStream(WorkDir + "\\" + ExtractedFileName, FileMode.CreateNew, FileAccess.ReadWrite, FileShare.ReadWrite);
                            }
                            catch (Exception ex)
                            {
                                //This should not happen xD
                                ExtractedFileName = ii.ToString() + ".raw";
                                ExtractedFileWriteStream = new FileStream(WorkDir + "\\" + ExtractedFileName, FileMode.CreateNew, FileAccess.ReadWrite, FileShare.ReadWrite);
                            }
                        }
                    }

                    if (contentType == 0x90 && isFile)
                    {
                        //Read/Write File
                        BinaryWriter ExtractedFile = new BinaryWriter(ExtractedFileWriteStream);
                        decrPKGReadStream.Seek((long)ExtractedFileOffset, SeekOrigin.Begin);

                        // Pieces calculation
                        double division = (double)ExtractedFileSize / (double)twentyMb;
                        UInt64 pieces = (UInt64)Math.Floor(division);
                        UInt64 mod = (UInt64)ExtractedFileSize % (UInt64)twentyMb;
                        if (mod > 0)
                            pieces += 1;

                        dumpFile = new byte[twentyMb];
                        for (UInt64 i = 0; i < pieces; i++)
                        {
                            //If we have a mod and this is the last piece then...
                            if ((mod > 0) && (i == (pieces - 1)))
                                dumpFile = new byte[mod];

                            //Fill buffer
                            brDecrPKG.Read(dumpFile, 0, dumpFile.Length);

                            ExtractedFile.Write(dumpFile);

                            Application.DoEvents();
                        }

                        ExtractedFileWriteStream.Close();
                        ExtractedFile.Close();
                    }

                    if (contentType != 0x90 && isFile)
                    {
                        //Read/Write File
                        BinaryWriter ExtractedFile = new BinaryWriter(ExtractedFileWriteStream);
                        decrPKGReadStream.Seek((long)ExtractedFileOffset, SeekOrigin.Begin);

                        // Pieces calculation
                        double division = (double)ExtractedFileSize / (double)twentyMb;
                        UInt64 pieces = (UInt64)Math.Floor(division);
                        UInt64 mod = (UInt64)ExtractedFileSize % (UInt64)twentyMb;
                        if (mod > 0)
                            pieces += 1;

                        dumpFile = new byte[twentyMb];
                        long elapsed = 0;
                        for (UInt64 i = 0; i < pieces; i++)
                        {
                            //If we have a mod and this is the last piece then...
                            if ((mod > 0) && (i == (pieces - 1)))
                                dumpFile = new byte[mod];

                            //Fill buffer
                            byte[] DecryptedData = DecryptData(dumpFile.Length, (long)ExtractedFileOffset + elapsed, (long)uiEncryptedFileStartOffset, PS3AesKey, encrPKGReadStream, brEncrPKG);
                            elapsed += dumpFile.Length;

                            //To avoid decryption pad we use dumpFile.Length that's the actual decrypted file size!
                            ExtractedFile.Write(DecryptedData, 0, dumpFile.Length);

                            Application.DoEvents();
                        }

                        ExtractedFileWriteStream.Close();
                        ExtractedFile.Close();
                    }

                    positionIdx = positionIdx + 32;

                    Application.DoEvents();
                }

                Application.DoEvents();

                //Close File
                encrPKGReadStream.Close();
                brEncrPKG.Close();

                decrPKGReadStream.Close();
                brDecrPKG.Close();

                //Delete decrypted file
                if (File.Exists(decryptedPKGFileName))
                {
                    File.Delete(decryptedPKGFileName);
                }

                // ResultText( "SUCCESS: Pkg extracted and decrypted successfully.");
                SystemSounds.Beep.Play();

                return true;
            }
            catch (Exception ex)
            {
                ResultText("ERROR: An error occured during the files extraction process ");
                SystemSounds.Beep.Play();
                return false;
            }
        }
        #endregion

        #endregion

        #region pkg2edat
        private static void scan_files()
        {
            IEnumerable<string> enumerable;
            Exception exception;
            string path = Path.GetDirectoryName(Assembly.GetExecutingAssembly().GetName().CodeBase).Replace(@"file:\", "");
            try
            {
                enumerable = Directory.EnumerateFiles(path, "*.pkg", SearchOption.AllDirectories);
                foreach (string str4 in enumerable)
                {
                    Console.WriteLine(str4);
                    pkg2edat(str4);
                }
            }
            catch (Exception exception1)
            {
                exception = exception1;
                Console.WriteLine(exception.Message);
            }
            try
            {
                enumerable = Directory.EnumerateFiles(path, "*.sfo", SearchOption.AllDirectories);
                foreach (string str4 in enumerable)
                {
                    sfo2edat(str4);
                }
            }
            catch (Exception ex)
            {
            }
        }

        private static void sfo2edat(string infile)
        {
            string outFile = null;
            outFile = new C00EDAT().makeedat(infile, outFile);
            if (Directory.Exists("temp"))
            {
                Directory.Delete("temp", true);
            }
            if (outFile.EndsWith(".edat"))
            {
                Console.WriteLine("Created " + outFile);
            }
        }

        private static void pkg2edat(string infile)
        {
            string str = null;
            str = new pkg2sfo().DecryptPKGFile(infile);
            if (Directory.Exists("temp"))
            {
                Directory.Delete("temp", true);
            }
            if (str.EndsWith(".edat"))
            {
                Console.WriteLine("Created " + str);
            }
        }
        #endregion

        #region CreateBubble

        private void CreatePDBFiles(string pkg_name)
        {
            int file_number = 80000000;
            string file_path = Application.StartupPath + "/game_pkg/" + file_number;
            while (Directory.Exists(Application.StartupPath + "//" + file_path))
            {
                file_number = file_number + 1;
                file_path = Application.StartupPath + "/game_pkg/" + file_number;
            }


            long pkg_size = 0;
            string path = Application.StartupPath + "//" + pkg_name;
            FileInfo pkg = new FileInfo(path);

            if (pkg.Exists)
            {
                pkg_size = pkg.Length;
            }


            // ------------------------------------------------------------------------
            // write - d0.pdb
            //
            string outFile = Application.StartupPath + "/game_pkg/" + file_number + "/d0.pdb";
            Directory.CreateDirectory(Application.StartupPath + "/game_pkg/" + file_number);
            FileStream o = File.Open(outFile, FileMode.Create);
            // 00000000 - Header
            byte[] header = new byte[4];
            header[0] = 0x00;
            header[1] = 0x00;
            header[2] = 0x00;
            header[3] = 0x00;
            o.Write(header, 0, 4);

            // 00000065 - Unknown
            byte[] unknown1 = new byte[16];
            unknown1[0] = 0x00;
            unknown1[1] = 0x00;
            unknown1[2] = 0x00;
            unknown1[3] = 0x65;
            unknown1[4] = 0x00;
            unknown1[5] = 0x00;
            unknown1[6] = 0x00;
            unknown1[7] = 0x04;
            unknown1[8] = 0x00;
            unknown1[9] = 0x00;
            unknown1[10] = 0x00;
            unknown1[11] = 0x04;
            unknown1[12] = 0x00;
            unknown1[13] = 0x00;
            unknown1[14] = 0x00;
            unknown1[15] = 0x00;
            o.Write(unknown1, 0, 16);

            // 0000006B - Unknown
            byte[] unknown2 = new byte[16];
            unknown2[0] = 0x00;
            unknown2[1] = 0x00;
            unknown2[2] = 0x00;
            unknown2[3] = 0x6B;
            unknown2[4] = 0x00;
            unknown2[5] = 0x00;
            unknown2[6] = 0x00;
            unknown2[7] = 0x04;
            unknown2[8] = 0x00;
            unknown2[9] = 0x00;
            unknown2[10] = 0x00;
            unknown2[11] = 0x04;
            unknown2[12] = 0x00;
            unknown2[13] = 0x00;
            unknown2[14] = 0x00;
            unknown2[15] = 0x03;
            o.Write(unknown2, 0, 16);

            // 00000068 - Status of download
            byte[] dl_status = new byte[16];
            dl_status[0] = 0x00;
            dl_status[1] = 0x00;
            dl_status[2] = 0x00;
            dl_status[3] = 0x68;
            dl_status[4] = 0x00;
            dl_status[5] = 0x00;
            dl_status[6] = 0x00;
            dl_status[7] = 0x04;
            dl_status[8] = 0x00;
            dl_status[9] = 0x00;
            dl_status[10] = 0x00;
            dl_status[11] = 0x04;
            dl_status[12] = 0x00;
            dl_status[13] = 0x00;
            dl_status[14] = 0x00;
            dl_status[15] = 0x00;
            o.Write(dl_status, 0, 16);

            // 000000D0 - Download current size (in bytes)
            byte[] dl_progress = new byte[12];
            dl_progress[0] = 0x00;
            dl_progress[1] = 0x00;
            dl_progress[2] = 0x00;
            dl_progress[3] = 0xD0;
            dl_progress[4] = 0x00;
            dl_progress[5] = 0x00;
            dl_progress[6] = 0x00;
            dl_progress[7] = 0x08;
            dl_progress[8] = 0x00;
            dl_progress[9] = 0x00;
            dl_progress[10] = 0x00;
            dl_progress[11] = 0x08;
            o.Write(dl_progress, 0, 12);

            //pkg size
            byte[] ps = BitConverter.GetBytes(pkg_size);
            Array.Reverse(ps);
            o.Write(ps, 0, 8);

            // 000000CE - Download expected size (in bytes)
            byte[] dl_size = new byte[12];
            dl_size[0] = 0x00;
            dl_size[1] = 0x00;
            dl_size[2] = 0x00;
            dl_size[3] = 0xCE;
            dl_size[4] = 0x00;
            dl_size[5] = 0x00;
            dl_size[6] = 0x00;
            dl_size[7] = 0x08;
            dl_size[8] = 0x00;
            dl_size[9] = 0x00;
            dl_size[10] = 0x00;
            dl_size[11] = 0x08;
            o.Write(dl_size, 0, 12);

            //pkg size
            o.Write(ps, 0, 8);

            // 00000069 - Display title
            byte[] title = new byte[4];
            title[0] = 0x00;
            title[1] = 0x00;
            title[2] = 0x00;
            title[3] = 0x69;
            o.Write(title, 0, 4);

            string title_str = "";
            title_str = string.Format("\xE2\x98\x85 Install \x22{0}\x22", pkg_name);

            int title_len = title_str.Length + 1;
            byte[] t = BitConverter.GetBytes(title_len);
            Array.Reverse(t);
            o.Write(t, 0, 4);
            o.Write(t, 0, 4);
            byte[] string_title = new byte[title_len];
            string_title = charsToByte((title_str).ToCharArray());
            o.Write(string_title, 0, string_title.Length);
            byte[] fill = new byte[1];
            fill[0] = 0x00;
            o.Write(fill, 0, 1);

            // 000000CB - PKG file name
            byte[] filename = new byte[4];
            filename[0] = 0x00;
            filename[1] = 0x00;
            filename[2] = 0x00;
            filename[3] = 0xCB;
            o.Write(filename, 0, 4);

            int filename_len = pkg_name.Length + 1;
            byte[] f = BitConverter.GetBytes(filename_len);
            Array.Reverse(f);
            o.Write(f, 0, 4);
            o.Write(f, 0, 4);
            byte[] string_name = new byte[filename_len];
            string_name = charsToByte((pkg_name).ToCharArray());
            o.Write(string_name, 0, string_name.Length);

            o.Write(fill, 0, 1);

            // 0000006A - Icon location / path (PNG w/o extension) 
            byte[] iconpath = new byte[4];
            iconpath[0] = 0x00;
            iconpath[1] = 0x00;
            iconpath[2] = 0x00;
            iconpath[3] = 0x6A;
            o.Write(iconpath, 0, 4);

            byte[] iconpath_len = new byte[8];
            iconpath_len[0] = 0x00;
            iconpath_len[1] = 0x00;
            iconpath_len[2] = 0x00;
            iconpath_len[3] = 0x2A;
            iconpath_len[4] = 0x00;
            iconpath_len[5] = 0x00;
            iconpath_len[6] = 0x00;
            iconpath_len[7] = 0x2A;
            o.Write(iconpath_len, 0, 8);

            string icon_path = "/dev_hdd0/vsh/game_pkg/" + file_number + "/ICON_FILE";
            byte[] string_path = new byte[0x2A];
            string_path = charsToByte((icon_path).ToCharArray());
            o.Write(string_path, 0, string_path.Length);
            ;
            o.Write(fill, 0, 1);
            o.Close();
            File.Copy(path, file_path + "/" + pkg_name);
            // ------------------------------------------------------------------------
            // write - ICON_FILE
            //

            File.Copy(Application.StartupPath + "\\ICON_FILE", Application.StartupPath + "/game_pkg/" + file_number + "/ICON_FILE");
        }

        public static byte[] charsToByte(char[] b)
        {
            byte[] c = new byte[b.Length];
            for (int i = 0; i < b.Length; i++)
                c[i] = (byte)b[i];
            return c;
        }

        #endregion

        #region Settings
        bool pkginstallmode = false; //true bubble install ; flase normal install
        bool pkgmode = false; //pkgmode yes/no
        bool backupdata = true; //backupdata yes/no
        #endregion

        #region pkglist
        int pkgcount = 0;
        List<String> pkglist = new List<string>(); //well this is your pkg list from step two
        #endregion

        #region edatlist
        int edatcount = 0;
        List<String> edats = new List<string>(); //adds ure custom edat's so if u wanna ad more just keep popping them in the list :) 
        #endregion

        #region IMAGEFROMBYTES
        private Image getImageFromBytes(byte[] image)
        {
            MemoryStream ms = new MemoryStream(image, 0, image.Length);
            return Image.FromStream(ms, true);
        }
        #endregion

        #region << NAudio >>

        void player_OnGetPlayerInfos(object sender, SharpMod.SharpModEventArgs e)
        {
            if (base.InvokeRequired && !base.IsDisposed)
            {
                GetPlayerInfosHandler method = new GetPlayerInfosHandler(this.updateUIP);
                try
                {
                    base.Invoke(method, new object[] { sender, e });
                }
                catch
                {
                }
            }
            else
            {
                this.updateUIP(sender, e);
            }

        }

        void updateUIP(object sender, SharpMod.SharpModEventArgs sme)
        {
            string lol = "";
            lol = String.Format("{0:000}/{1:000}", sme.PatternPosition, player.CurrentModule.Patterns[sme.SongPosition].RowsCount);

            lol = String.Format("{0:000}", sme.SongPosition);

        }

        void DspAudioProcessor_OnCurrentSampleChanged(int[] leftSample, int[] rightSample)
        {
            int[] vuMeterLeft;
            int[] vuMeterRight;
            vuMeterLeft = (leftSample);
            vuMeterRight = (rightSample);
        }

        #endregion << NAudio >>

        #region << Normal Comands >>

        private static void DirectoryCopy(string sourceDirName, string destDirName, bool copySubDirs)
        {
            // Get the subdirectories for the specified directory.
            DirectoryInfo dir = new DirectoryInfo(sourceDirName);
            DirectoryInfo[] dirs = dir.GetDirectories();

            if (!dir.Exists)
            {
                throw new DirectoryNotFoundException(
                    "Source directory does not exist or could not be found: "
                    + sourceDirName);
            }

            // If the destination directory doesn't exist, create it. 
            if (!Directory.Exists(destDirName))
            {
                Directory.CreateDirectory(destDirName);
            }

            // Get the files in the directory and copy them to the new location.
            FileInfo[] files = dir.GetFiles();
            foreach (FileInfo file in files)
            {
                string temppath = Path.Combine(destDirName, file.Name);
                if (file.Name != "PARAM.SFO")
                {
                    file.CopyTo(temppath, false);
                }
                else if (!File.Exists(temppath))
                {
                    file.CopyTo(temppath, false);
                }
            }

            // If copying subdirectories, copy them and their contents to new location. 
            if (copySubDirs)
            {
                foreach (DirectoryInfo subdir in dirs)
                {
                    string temppath = Path.Combine(destDirName, subdir.Name);
                    DirectoryCopy(subdir.FullName, temppath, copySubDirs);
                }
            }
        }

        #endregion << Normal Comands >>

        #endregion << Var's >>

        #region << Events >>

        private void pictureBox2_Click_1(object sender, EventArgs e)
        {
            System.Diagnostics.Process.Start("http://www.xxxthedartkprogramerxxx.net");
        }

        #endregion << Events >>

        #region << Public Methods >>

        public void log(string log)
        {
            //Create For Log Window
            Tracker.Items.Add(log + "\r\n");
            //AutoScroll Mode
            if (Tracker.SelectionMode != SelectionMode.None)
            {
                Tracker.SelectedIndex = Tracker.Items.Count - 1;
                Tracker.SelectedIndex = -1;
            }
            //Do Events
            Application.DoEvents();
        }

        public void pkg(string pkg)
        {
            this.btnPKG.Text = pkg;
            Application.DoEvents();
        }

        static string CMD(string args)
        {
            string cmdbat = "cd " + Application.StartupPath.Replace("\\", "/") + "\r\n";
            cmdbat += args + " >> out.txt\r\n";
            cmdbat += "exit\r\n";
            File.WriteAllText(Application.StartupPath + "\\cmd.bat", cmdbat);

            System.Diagnostics.Process process = new System.Diagnostics.Process();

            System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();
            startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
            startInfo.Arguments = "";
            startInfo.UseShellExecute = true;
            startInfo.WorkingDirectory = Application.StartupPath;
            startInfo.CreateNoWindow = true;
            startInfo.FileName = Application.StartupPath + "\\cmd.bat";
            process.StartInfo = startInfo;

            process.Start();
            process.WaitForExit();
            System.Threading.Thread.Sleep(5000);
            while (!File.Exists(Application.StartupPath + @"\\out.txt"))
                Thread.Sleep(100);
            string cmdOut = File.ReadAllText(Application.StartupPath + @"\\out.txt");
            File.Delete(Application.StartupPath + "\\cmd.bat");
            return cmdOut;

        }

        #endregion << Public Methods >>

        #region << Private Events >>

        private void CheckUpdate()
        {
            string str3 = "";
            if (NetworkInterface.GetIsNetworkAvailable() == false)
            {
                try
                {
                    str3 = new WebClient().DownloadString("http://www.xxxthedartkprogramerxxx.net//Update/PeXploit/Update.txt");
                    if (appversion == str3)
                    {
                        updateavaialable = false;

                    }
                    else
                    {
                        updateavaialable = true;
                    }
                }
                catch
                {
                    updateavaialable = false;
                }
            }
            if (updateavaialable == true)
            {
                Welcome.INFO = ("Update Found");
                DialogResult result = MessageBox.Show("Update Is Avaialbe Do You Want To Download It ?", "Update Found", MessageBoxButtons.YesNo, MessageBoxIcon.Information);
                if (DialogResult.Yes == result)
                {
                    Welcome.INFO = ("Downloading...");
                    this.Hide();
                    Download_WIndow dw = new Download_WIndow();
                    dw.url = "http://www.xxxthedartkprogramerxxx.net//Download/PeXploit.zip";
                    dw.ShowDialog();
                    this.Show();
                    Thread.Sleep(1000);
                    if (File.Exists(Application.StartupPath + "\\PeXploit.zip"))
                    {
                        this.notifyIcon1.ShowBalloonTip(0x7d0, "Extracting", "Extracting Update", ToolTipIcon.Info);
                        Ionic.Zip.ZipFile zip = new Ionic.Zip.ZipFile(Application.StartupPath + @"\Pexploit.zip");
                        zip.ExtractAll(Application.StartupPath + @"\");
                        Thread.Sleep(1000);
                        this.notifyIcon1.ShowBalloonTip(0x7d0, "Extracted", "Opening File", ToolTipIcon.Info);
                        MessageBox.Show("Mainually Delete The Old Files Thanks");
                        System.Diagnostics.Process.Start(Application.StartupPath + @"\PeXploit\PeXploit.exe");
                        Application.Exit();
                    }
                    File.Delete(Application.StartupPath + @"\Pexploit.zip");
                }
            }
            else
            {
                Welcome.INFO = ("You Have The Latest Verion Of PeXploit");
            }
        }

        private void PeXploit_Main_Load(object sender, EventArgs e)
        {
            packagelist.Items.Clear();
            edatlist.Items.Clear();
            SFO_link.Visible = false;
            this.Visible = false;
            if (FirstLoad.IsBusy == false)
            {
                FirstLoad.RunWorkerAsync();
            }
            Welcome.INFO = " Please Wait A Few Seconds ...";

            CheckUpdate();

            Thread.Sleep(1000);

            Welcome.INFO = ("Welcome.....");
            if (File.Exists(Application.StartupPath + "\\idps.bin") == true)
            {
                txtIDPS.Text = "idps.bin Located";
                label10.Visible = true;
            }
            FirstLoad.CancelAsync();
            FirstLoad.Dispose();
            Thread.Sleep(1000);
            this.Visible = true;
            try
            {
                myMod = ModuleLoader.Instance.LoadModule(Application.StartupPath + "\\Main.xm");
                player = new ModulePlayer(myMod);
                // Or NAudio Driver
                player.DspAudioProcessor = new AudioProcessor(1024, 50);
                player.MixCfg.Rate = 48000;
                player.MixCfg.Style = SharpMod.Player.RenderingStyle.Stereo;
                player.DspAudioProcessor.OnCurrentSampleChanged += new AudioProcessor.CurrentSampleChangedHandler(DspAudioProcessor_OnCurrentSampleChanged);
                player.OnGetPlayerInfos += new GetPlayerInfosHandler(player_OnGetPlayerInfos);
                NAudioWaveChannelDriver drv = new NAudioWaveChannelDriver(NAudioWaveChannelDriver.Output.WaveOut);
                player.RegisterRenderer(drv);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void btnPKG_Click(object sender, EventArgs e)
        {

            #region << PeXploit PKG(s) >>
            if (radioButton2.Checked == true) //Package Install
            {
                openFileDialog2.Title = "Select PS3 PKG File";
                openFileDialog2.Filter = "PS3 PKG Files|*.pkg";
                openFileDialog2.InitialDirectory = System.Environment.SpecialFolder.MyComputer.ToString();
                if (openFileDialog2.ShowDialog() == DialogResult.OK)
                {
                    txtPKG.Text = openFileDialog2.FileName.ToString();
                    FileInfo ini = new FileInfo(txtPKG.Text);
                    pkgcount++;
                    string ReadPKGFileName = this.ReadPKGFile(txtPKG.Text, ini);
                    radioButton1.Enabled = false;
                    radioButton2.Enabled = false;
                    radioButton3.Enabled = false;
                    pkglist.Add(new DirectoryInfo(txtPKG.Text).FullName);//add the pkg to a list so we can do batch install still working out the kinks
                    packagelist.Items.Add(new FileInfo(txtPKG.Text).Name);
                    pkgcopyworker.RunWorkerAsync();
                }
            }
            #endregion << PeXploit PKG(s) >>

            #region << Bubble Install Method >>
            else if (radioButton1.Checked == true) // Bubble INstall Method
            {
                openFileDialog2.Title = "Select PS3 PKG File";
                openFileDialog2.Filter = "PS3 PKG Files|*.pkg";
                openFileDialog2.InitialDirectory = System.Environment.SpecialFolder.MyComputer.ToString();
                if (openFileDialog2.ShowDialog() == DialogResult.OK)
                {
                    txtPKG.Text = openFileDialog2.FileName.ToString();
                    FileInfo ini = new FileInfo(txtPKG.Text);
                    pkgcount++;
                    radioButton1.Enabled = false;
                    radioButton2.Enabled = false;
                    radioButton3.Enabled = false;
                    string decryptedPKGFileName = this.ReadPKGFile(txtPKG.Text, ini);
                    if ((decryptedPKGFileName != null) && (decryptedPKGFileName != string.Empty))
                    {
                        string str = null;
                        str = new pkg2sfo().DecryptPKGFile(decryptedPKGFileName);
                        if (Directory.Exists(Application.StartupPath + "\\edats"))
                        {
                            Directory.Delete(Application.StartupPath + "\\edats", true);
                        }
                    }
                    if (lblPackageType.Text != "Retail Package")
                    {
                        MessageBox.Show("Bubble Install Only Supports Retail C00 Packages");
                        return;
                    }
                    pkglist.Add(new DirectoryInfo(txtPKG.Text).FullName);//add the pkg to a list so we can do batch install still working out the kinks
                    packagelist.Items.Add(new FileInfo(txtPKG.Text).Name);
                    pkgcopyworker.RunWorkerAsync();
                }

            }
            #endregion << Bubble Install Method >>

            #region << PKG_View Extracted >>
            else if (radioButton3.Checked == true)
            {
                //open the browser to get the folder
                FolderBrowserDialog theDialog = new FolderBrowserDialog();
                theDialog.RootFolder = System.Environment.SpecialFolder.MyComputer;
                if (theDialog.ShowDialog() == DialogResult.OK)
                {
                    SFO_link.Visible = true;
                    pictureBox1.Visible = true;
                    radioButton1.Enabled = false;
                    radioButton2.Enabled = false;
                    radioButton3.Enabled = false;
                    try
                    {
                        this.Text = "PeXploit";
                        txtPKG.Text = theDialog.SelectedPath.ToString();
                        //Adding PKG(s) to the list
                        pkgcount++;
                        pkglist.Add(new DirectoryInfo(txtPKG.Text).FullName);//add the pkg to a list so we can do batch install still working out the kinks
                        packagelist.Items.Add(new FileInfo(txtPKG.Text).Name);
                        //Log it
                        log(new DirectoryInfo(txtPKG.Text).Name + " Added To List");
                        if (Directory.Exists(txtPKG.Text + @"\C00\"))
                        {
                            PARAM_SFO para = new PARAM_SFO(txtPKG.Text + @"\C00\PARAM.SFO");
                            pictureBox1.ImageLocation = theDialog.SelectedPath.ToString() + @"\C00\ICON0.PNG";
                            try
                            {
                                var file = File.ReadAllBytes(theDialog.SelectedPath.ToString() + @"\C00\PIC1.PNG");

                                pictureBox1.BackgroundImage = getImageFromBytes(file);
                            }
                            catch (Exception ee)
                            {

                            }
                            txtTitle.Text += para.TitleID;
                            txtDATA.Text += para.DataType;
                            this.Text += " : " + para.Title.Replace("???", "-");
                        }
                        else
                        {
                            PARAM_SFO para = new PARAM_SFO(txtPKG.Text + @"\PARAM.SFO");
                            pictureBox1.ImageLocation = theDialog.SelectedPath.ToString() + @"\ICON0.PNG";
                            try
                            {

                                var file = File.ReadAllBytes(theDialog.SelectedPath.ToString() + @"\PIC1.PNG");

                                pictureBox1.BackgroundImage = getImageFromBytes(file);
                            }
                            catch (Exception ee)
                            {

                            }
                            txtTitle.Text += para.TitleID;
                            txtDATA.Text += para.DataType;
                            this.Text += " : " + para.Title.Replace("???", "-");
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("The Incorect PKG File Was Selected \n\rPKG Names Usally Starts With BLES,BLUS,NPEA\n\rA More Spesific Error Can Be Found Within The Errorlog", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        if (File.Exists("errorlog.txt"))
                            File.Delete("errorLog.txt");
                        System.IO.File.WriteAllText(Application.StartupPath + "\\errorlog.txt", ex.ToString());
                    }
                }
            }
            #endregion << PKG_View Extracted >>
        }

        private void btnStepOne_Click(object sender, EventArgs e)
        {
            //simple open file dialog
            openFileDialog1.Title = "Select PS3 Backup File";
            openFileDialog1.Filter = "PS3 Data Files|archive.dat";
            openFileDialog1.InitialDirectory = System.Environment.SpecialFolder.MyComputer.ToString();
            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {

                txtBack.Text = openFileDialog1.FileName.ToString();
                FileInfo fi = new FileInfo(txtBack.Text);
                string dirPath = fi.Directory.FullName.Replace("\\", "/");
                log("Copying Index Files To Working Directory...");
                if (File.Exists(Application.StartupPath + "\\archive.dat"))
                    File.Delete(Application.StartupPath + "\\archive.dat");
                if (File.Exists(Application.StartupPath + "\\archive2.dat"))
                    File.Delete(Application.StartupPath + "\\archive2.dat");
                File.Copy(dirPath + "/archive.dat", Application.StartupPath + "\\archive.dat");
                File.Copy(dirPath + "/archive2.dat", Application.StartupPath + "\\archive2.dat");
                log("Copy Completed");
                log("Reading Usernumbers");
                btnPKG.Enabled = false;
                if (File.Exists(dirPath + "/archive.dat"))
                    UsernumberReader.RunWorkerAsync();
            }
        }

        private void btnEdat_Click(object sender, EventArgs e)
        {
            OpenFileDialog theDialog = new OpenFileDialog();
            theDialog.Title = "Select PS3 edat's";
            theDialog.Filter = "PS3 edat's |*.edat| All Files|*.*";
            theDialog.InitialDirectory = System.Environment.SpecialFolder.MyComputer.ToString();
            if (theDialog.ShowDialog() == DialogResult.OK)
            {
                edats.Add(theDialog.FileName.ToString());
                edatcount++;
                edatlist.Items.Add(new FileInfo(theDialog.FileName.ToString()).Name);
                txtEdat.Text = theDialog.SafeFileName.ToString() + " Added";
            }
        }

        private void btnIDPS_Click(object sender, EventArgs e)
        {
            DialogResult result = MessageBox.Show("You Will Need To Supply Your IDPS For This Function You Will Need To Supply It In The RootFolder Of This Application \n\nTo Get Your IDPS Please Use Flatz's Tool aKa 'IDPS Stealer' Or The GUI Provided Before Sony Blocks It", "Notice", MessageBoxButtons.OK, MessageBoxIcon.Warning);

            if (result == DialogResult.OK)
            {
                if (File.Exists(Application.StartupPath + "\\idps.bin") == true)
                {
                    txtIDPS.Text = "idps.bin Located";
                    label10.Visible = true;
                }
                else if (!File.Exists(Application.StartupPath + "\\idps.bin"))
                {
                    txtIDPS.Text = "idps.bin Not Found";
                    System.Diagnostics.Process.Start(Application.StartupPath + @"\\IDPS Stealer\IDPS Stealer GUI.exe");
                }
            }
        }

        private void FirstLoad_DoWork(object sender, DoWorkEventArgs e)
        {
            Welcome loading = new Welcome(FirstLoad);
            loading.ShowDialog();
            loading.Focus();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            foreach (string item in pkglist)
            {
                try
                {
                    if (item.Contains(packagelist.SelectedItem.ToString()))
                    {
                        pkglist.Remove(item);
                        log(packagelist.SelectedItem.ToString() + "Has Been Removed From The List");
                        packagelist.Items.Remove(packagelist.SelectedItem);
                        pkgcount--;
                        if (pkgcount == 0)
                        {
                            txtPKG.Text = "";
                            Tracker.Items.Clear();
                            log("========Progress Tracker========");
                            radioButton1.Enabled = true;
                            radioButton2.Enabled = true;
                            radioButton3.Enabled = true;
                        }
                        return;
                    }
                }
                catch
                {
                }
            }
        }

        private void button2_Click(object sender, EventArgs e)
        {
            foreach (string item in edats)
            {
                try
                {
                    if (item.Contains(edatlist.SelectedItem.ToString()))
                    {
                        edats.Remove(item);
                        log(edatlist.SelectedItem.ToString() + "Has Been Removed From The List");
                        edatlist.Items.Remove(edatlist.SelectedItem);
                        edatcount--;
                        if (edatcount == 0)
                        {
                            txtEdat.Text = "";
                            Tracker.Items.Clear();
                            log("========Progress Tracker========");
                        }
                        return;
                    }
                }

                catch
                { }
            }
        }

        #endregion << Private Events >>

        #region <<FormHeader>>
        #region << Music Botton >>
        private void linkLabel2_LinkClicked(object sender, MouseEventArgs e)
        {
            MusicPlayer.RunWorkerAsync();
            if (music == 0)
            {
                linkLabel2.Image = Properties.Resources.Music_Enabled_Normal;
            }
            else if (music == 1)
            {
                linkLabel2.Image = Properties.Resources.Music_Disabled_Normal;
            }
        }

        private void linkLabel2_MouseEnter(object sender, EventArgs e)
        {
            if (music == 0)
            {
                linkLabel2.Image = Properties.Resources.Music_Enabled_MouseOver;
            }
            else if (music == 1)
            {
                linkLabel2.Image = Properties.Resources.Music_Disabled_MouseOver;
            }
        }

        private void linkLabel2_MouseLeave(object sender, EventArgs e)
        {
            if (music == 0)
            {
                linkLabel2.Image = Properties.Resources.Music_Enabled_Normal;
            }
            else if (music == 1)
            {
                linkLabel2.Image = Properties.Resources.Music_Disabled_Normal;
            }
        }
        #endregion << Music Botton >>

        #region << Switch View >>
        private void pictureBox3_MouseClick(object sender, MouseEventArgs e)
        {
            this.Hide();
            PeXploit_Main normal = new PeXploit_Main();
            normal.ShowDialog();
            this.Close();
        }

        private void pictureBox3_MouseEnter(object sender, EventArgs e)
        {
            pictureBox3.Image = Properties.Resources.SwitchView_MouseOver;
        }

        private void pictureBox3_MouseLeave(object sender, EventArgs e)
        {
            pictureBox3.Image = Properties.Resources.SwitchView_Normal;
        }
        #endregion << Switch View >>

        #region << Advanced Button >>
        private void pictureBox4_MouseClick(object sender, MouseEventArgs e)
        {
            try
            {
                System.Diagnostics.Process.Start((Application.StartupPath + "\\Advanced.exe"));
            }
            catch
            {
                MessageBox.Show("Advanced.exe is missing ?", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void pictureBox4_MouseEnter(object sender, EventArgs e)
        {
            pictureBox4.Image = Properties.Resources.Advanced_MouseOver;
        }

        private void pictureBox4_MouseLeave(object sender, EventArgs e)
        {
            pictureBox4.Image = Properties.Resources.Advanced_Normal;
        }

        #endregion << Advanced Button >>

        #region << About Button >>
        private void btnAbout_MouseClick(object sender, MouseEventArgs e)
        {
            MessageBox.Show("This Tool Was Created For Use With Kakaroto's PS3xport \n \nThis Tool Was Created To Injecting .pkg Files Into Your PS3 Backup \n\nSpecial Thanks To \n* Kakaroto \n* cfwprophet \n* hexxxen (recovery trick) \n* DetrikSys for his work on ps3xport(win) \nand many other devs for this release", "About", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private void btnAbout_MouseEnter(object sender, EventArgs e)
        {
            btnAbout.Image = Properties.Resources.About_MouseOver;
        }

        private void btnAbout_MouseLeave(object sender, EventArgs e)
        {
            btnAbout.Image = Properties.Resources.About_Normal;
        }

        #endregion << About Button >>

        #endregion <<FormHeader>>

        #region << FormBody >>

        #region << Select Backup >>
        private void btnBackup_MouseEnter(object sender, EventArgs e)
        {
            btnBackup.Image = Properties.Resources.SelectBackup_MouseOver;
        }

        private void btnBackup_MouseLeave(object sender, EventArgs e)
        {
            btnBackup.Image = Properties.Resources.SelectBackup_Normal;
        }
        #endregion << Select Backup >>

        #region << Select PKG(s) >>

        private void btnPKG_MouseEnter(object sender, EventArgs e)
        {
            btnPKG.Image = Properties.Resources.SelectPKG_S__MouseOver;
        }

        private void btnPKG_MouseLeave(object sender, EventArgs e)
        {
            btnPKG.Image = Properties.Resources.SelectPKG_S__Normal;
        }

        #endregion << Select PKG(s) >>

        #region << Select Edat(s) >>
        private void btnEdat_MouseEnter(object sender, EventArgs e)
        {
            btnEdat.Image = Properties.Resources.SelectEDAT_S__MouseOver;
        }

        private void btnEdat_MouseLeave(object sender, EventArgs e)
        {
            btnEdat.Image = Properties.Resources.SelectEDAT_S__Normal;
        }

        #endregion << Select Edat(s) >>

        #region << Select IDPS >>
        private void btnIDPS_MouseEnter(object sender, EventArgs e)
        {
            btnIDPS.Image = Properties.Resources.SelectIDPS_MouseOver;
        }

        private void btnIDPS_MouseLeave(object sender, EventArgs e)
        {
            btnIDPS.Image = Properties.Resources.SelectIDPS_Normal;
        }
        #endregion << Select IDPS >>

        #region << RUN >>
        private void btnRUN_Click(object sender, EventArgs e)
        {
            if (txtBack.Text == "" && txtPKG.Text == "")
            {
                MessageBox.Show("Please Select Paths For Your Backup And For The Pkg");
            }
            else if (txtBack.Text == "")
            {
                MessageBox.Show("You Need To Select Your Backup");
            }

            else
            {
                if (usernumcbx.Text == "Select Your Usernumber")
                {
                    Tracker.Invoke(new Action(() => log("No Usernumber Selected Changing TO Defualt Fail Safe")));
                    usernumcbx.Invoke((new Action(() => usernumcbx.SelectedIndex = 0)));
                }
                progressBar1.Visible = true;
                Tracker.Visible = true;
                btnRUN.Image = Properties.Resources.PatchAndGo_Disabled;
                btnRUN.Enabled = false;
                pkginstallworker.RunWorkerAsync();
                usernum = usernumcbx.Text;
                Tracker.Items.Clear();
                Tracker.Items.Add("============== Progress Tracker ============");
            }
        }

        private void btnRUN_MouseEnter(object sender, EventArgs e)
        {
            btnRUN.Image = Properties.Resources.PatchAndGo_MouseOver;
        }

        private void btnRUN_MouseLeave(object sender, EventArgs e)
        {
            btnRUN.Image = Properties.Resources.PatchAndGo_Normal;
        }
        #endregion << RUN >>

        #region << Remove PKG(s) >>

        private void button1_MouseEnter(object sender, EventArgs e)
        {
            button1.Image = Properties.Resources.Remove_MouseOver;
        }

        private void button1_MouseLeave(object sender, EventArgs e)
        {
            button1.Image = Properties.Resources.Remove_Normal;
        }

        #endregion << remove PKG(s) >>

        #region << Remove EDAT(s) >>
        private void button2_MouseEnter(object sender, EventArgs e)
        {
            button2.Image = Properties.Resources.Remove_MouseOver;
        }

        private void button2_MouseLeave(object sender, EventArgs e)
        {
            button2.Image = Properties.Resources.Remove_Normal;
        }
        #endregion << Remove EDAT(s)>>

        #region << Info >>
        private void label7_Click(object sender, EventArgs e)
        {
            Info info = new Info();
            info.ShowDialog();
        }
        #endregion << Info >>

        #region << IDPS >>
        private void label10_Click(object sender, EventArgs e)
        {
            byte[] psid = System.IO.File.ReadAllBytes(Application.StartupPath + "\\idps.bin");
            MessageBox.Show("Your IDPS is " + BitConverter.ToString(psid) + " Remember to always keep this safe and away from others");
        }
        #endregion < IDPS >>

        #endregion << FormBody >>

        #region << FormCode >>

        #region << PeXploit Move Code >>

        private void PeXploit_Main_MouseDown(object sender, MouseEventArgs e)
        {
            _dragging = true;
            _start_point = new Point(e.X, e.Y);
        }

        private void PeXploit_Main_MouseUp(object sender, MouseEventArgs e)
        {
            _dragging = false;
        }

        private void PeXploit_Main_MouseMove(object sender, MouseEventArgs e)
        {
            if (_dragging)
            {
                Point p = PointToScreen(e.Location);
                Location = new Point(p.X - this._start_point.X, p.Y - this._start_point.Y);
            }
        }

        #endregion << PeXplot Move Code >>

        #endregion << FormCode >>

        private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {
            if (checkBox1.Checked == false)
            {
                DialogResult result = MessageBox.Show("You Are Sellecting Not To Buckup Any Data Are You Sure ?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                {
                    if (result == DialogResult.Yes)
                    {
                        checkBox1.Checked = false;
                    }
                    else
                    {
                        checkBox1.Checked = true;
                    }
                }
            }
        }



       
    }
}
