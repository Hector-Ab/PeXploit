
//▒██   ██▒▒██   ██▒▒██   ██▒   ▄▄▄█████▓ ██░ ██ ▓█████    ▓█████▄  ▄▄▄       ██▀███   ██ ▄█▀ ██▓███   ██▀███   ▒█████    ▄████  ██▀███   ▄▄▄       ███▄ ▄███▓▓█████  ██▀███     ▒██   ██▒▒██   ██▒▒██   ██▒
//▒▒ █ █ ▒░▒▒ █ █ ▒░▒▒ █ █ ▒░   ▓  ██▒ ▓▒▓██░ ██▒▓█   ▀    ▒██▀ ██▌▒████▄    ▓██ ▒ ██▒ ██▄█▒ ▓██░  ██▒▓██ ▒ ██▒▒██▒  ██▒ ██▒ ▀█▒▓██ ▒ ██▒▒████▄    ▓██▒▀█▀ ██▒▓█   ▀ ▓██ ▒ ██▒   ▒▒ █ █ ▒░▒▒ █ █ ▒░▒▒ █ █ ▒░
//░░  █   ░░░  █   ░░░  █   ░   ▒ ▓██░ ▒░▒██▀▀██░▒███      ░██   █▌▒██  ▀█▄  ▓██ ░▄█ ▒▓███▄░ ▓██░ ██▓▒▓██ ░▄█ ▒▒██░  ██▒▒██░▄▄▄░▓██ ░▄█ ▒▒██  ▀█▄  ▓██    ▓██░▒███   ▓██ ░▄█ ▒   ░░  █   ░░░  █   ░░░  █   ░
// ░ █ █ ▒  ░ █ █ ▒  ░ █ █ ▒    ░ ▓██▓ ░ ░▓█ ░██ ▒▓█  ▄    ░▓█▄   ▌░██▄▄▄▄██ ▒██▀▀█▄  ▓██ █▄ ▒██▄█▓▒ ▒▒██▀▀█▄  ▒██   ██░░▓█  ██▓▒██▀▀█▄  ░██▄▄▄▄██ ▒██    ▒██ ▒▓█  ▄ ▒██▀▀█▄      ░ █ █ ▒  ░ █ █ ▒  ░ █ █ ▒ 
//▒██▒ ▒██▒▒██▒ ▒██▒▒██▒ ▒██▒     ▒██▒ ░ ░▓█▒░██▓░▒████▒   ░▒████▓  ▓█   ▓██▒░██▓ ▒██▒▒██▒ █▄▒██▒ ░  ░░██▓ ▒██▒░ ████▓▒░░▒▓███▀▒░██▓ ▒██▒ ▓█   ▓██▒▒██▒   ░██▒░▒████▒░██▓ ▒██▒   ▒██▒ ▒██▒▒██▒ ▒██▒▒██▒ ▒██▒
//▒▒ ░ ░▓ ░▒▒ ░ ░▓ ░▒▒ ░ ░▓ ░     ▒ ░░    ▒ ░░▒░▒░░ ▒░ ░    ▒▒▓  ▒  ▒▒   ▓▒█░░ ▒▓ ░▒▓░▒ ▒▒ ▓▒▒▓▒░ ░  ░░ ▒▓ ░▒▓░░ ▒░▒░▒░  ░▒   ▒ ░ ▒▓ ░▒▓░ ▒▒   ▓▒█░░ ▒░   ░  ░░░ ▒░ ░░ ▒▓ ░▒▓░   ▒▒ ░ ░▓ ░▒▒ ░ ░▓ ░▒▒ ░ ░▓ ░
//░░   ░▒ ░░░   ░▒ ░░░   ░▒ ░       ░     ▒ ░▒░ ░ ░ ░  ░    ░ ▒  ▒   ▒   ▒▒ ░  ░▒ ░ ▒░░ ░▒ ▒░░▒ ░       ░▒ ░ ▒░  ░ ▒ ▒░   ░   ░   ░▒ ░ ▒░  ▒   ▒▒ ░░  ░      ░ ░ ░  ░  ░▒ ░ ▒░   ░░   ░▒ ░░░   ░▒ ░░░   ░▒ ░
// ░    ░   ░    ░   ░    ░       ░       ░  ░░ ░   ░       ░ ░  ░   ░   ▒     ░░   ░ ░ ░░ ░ ░░         ░░   ░ ░ ░ ░ ▒  ░ ░   ░   ░░   ░   ░   ▒   ░      ░      ░     ░░   ░     ░    ░   ░    ░   ░    ░  
// ░    ░   ░    ░   ░    ░               ░  ░  ░   ░  ░      ░          ░  ░   ░     ░  ░               ░         ░ ░        ░    ░           ░  ░       ░      ░  ░   ░         ░    ░   ░    ░   ░    ░  
//                                                          ░                                                        

//=======================================================================================
//          Advanced Window For PeXploit v0.8 out dated and no longer in use
//=======================================================================================



using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Threading;

namespace PeXploit
{
    public partial class Advanced : Form
    {
        public Advanced()
        {
            InitializeComponent();
        }

        #region VAr's

        //VArubales

        string extractable = "";
        string Extractedfilename = "";
        #endregion

        #region//Functions
        //CMD Funtion For Global
        static string CMD(string args)
        {
            string cmdbat = "cd " + Application.StartupPath.Replace("\\", "/") + "\r\n";
            cmdbat += args + " >> out.txt\r\n";
            cmdbat += "exit\r\n";
            File.WriteAllText(Application.StartupPath + "\\cmd.bat", cmdbat);

            System.Diagnostics.Process process = new System.Diagnostics.Process();

            System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();
            startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
            startInfo.Arguments = "";
            startInfo.UseShellExecute = true;
            startInfo.WorkingDirectory = Application.StartupPath;
            startInfo.CreateNoWindow = true;
            startInfo.FileName = Application.StartupPath + "\\cmd.bat";
            process.StartInfo = startInfo;

            process.Start();
            process.WaitForExit();
            System.Threading.Thread.Sleep(5000);
            while (!File.Exists(Application.StartupPath + @"\\out.txt"))
                Thread.Sleep(100);
            string cmdOut = File.ReadAllText(Application.StartupPath + @"\\out.txt");
            File.Delete(Application.StartupPath + "\\cmd.bat");
            return cmdOut;

        }

        public void log(string log)
        {
            label2.Invoke(new Action(() => label2.Text = (log + "\r\n")));
            Application.DoEvents();
        }

        private static void DirectoryCopy(string sourceDirName, string destDirName, bool copySubDirs)
        {
            // Get the subdirectories for the specified directory.
            DirectoryInfo dir = new DirectoryInfo(sourceDirName);
            DirectoryInfo[] dirs = dir.GetDirectories();

            if (!dir.Exists)
            {
                throw new DirectoryNotFoundException(
                    "Source directory does not exist or could not be found: "
                    + sourceDirName);
            }

            // If the destination directory doesn't exist, create it. 
            if (!Directory.Exists(destDirName))
            {
                Directory.CreateDirectory(destDirName);
            }

            // Get the files in the directory and copy them to the new location.
            FileInfo[] files = dir.GetFiles();
            foreach (FileInfo file in files)
            {
                string temppath = Path.Combine(destDirName, file.Name);
                file.CopyTo(temppath, false);
            }

            // If copying subdirectories, copy them and their contents to new location. 
            if (copySubDirs)
            {
                foreach (DirectoryInfo subdir in dirs)
                {
                    string temppath = Path.Combine(destDirName, subdir.Name);
                    DirectoryCopy(subdir.FullName, temppath, copySubDirs);
                }
            }
        }

        public void log1(string log)
        {
            label14.Invoke(new Action(() => label14.Text = (log + "\r\n")));
            Application.DoEvents();
        }
        #endregion


        private void button1_Click(object sender, EventArgs e)
        {
            openFileDialog1.Title = "Select PS3 Backup File";
            openFileDialog1.Filter = "PS3 Data Files|archive.dat";
            openFileDialog1.InitialDirectory = System.Environment.SpecialFolder.MyComputer.ToString();
            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {

                txtBack.Text = openFileDialog1.FileName.ToString();

                FileInfo fi = new FileInfo(txtBack.Text);
                backgroundWorker2.RunWorkerAsync();
                string dirPath = fi.Directory.FullName.Replace("\\", "/");
                if (File.Exists(Application.StartupPath + "\\archive.dat"))
                    File.Delete(Application.StartupPath + "\\archive.dat");
                if (File.Exists(Application.StartupPath + "\\archive2.dat"))
                    File.Delete(Application.StartupPath + "\\archive2.dat");
                File.Copy(dirPath + "/archive.dat", Application.StartupPath + "\\archive.dat");
                File.Copy(dirPath + "/archive2.dat", Application.StartupPath + "\\archive2.dat");
                tabControl1.Enabled = true;
                if (File.Exists(dirPath + "/archive.dat"))
                    backgroundWorker1.RunWorkerAsync();
            }


        }

        private void backgroundWorker1_DoWork(object sender, DoWorkEventArgs e)
        {
            string cleanline = "";
            string command = "ps3xport.exe ExtractPSID ./ psid.bin SetPSID psid.bin ReadIndex ./archive.dat";
            string retun = CMD(command);
            string[] lines = System.IO.File.ReadAllLines(Application.StartupPath + "\\out.txt");
            log("loading dev_hdd0");
            foreach (string line in lines)
            {
                if (line.Contains("Total archive size :"))
                {
                    cleanline = line.Substring(line.IndexOf(':'));
                    if (cleanline.Contains(":"))
                        cleanline = cleanline.Replace(":", "");
                    label18.Invoke(new Action(() => label18.Text = cleanline));
                }
                if(line.Contains("/dev_hdd0/"))
                {
                    cleanline = line.Substring(line.IndexOf('/'));
                    listBox1.Invoke(new Action(() => listBox1.Items.Add(cleanline)));
                }
                for (int i = 1; i <= 9; i++)
                {
                    string User = "/dev_hdd0/home/0000000" + i;
                    {
                        if (line.Contains(User))
                        {
                            if (!domainUpDown1.Items.Contains("0000000" + i))
                                domainUpDown1.Invoke(new Action(() => domainUpDown1.Items.Add("0000000" + i)));
                            if (!domainUpDown2.Items.Contains("0000000" + i))
                                domainUpDown2.Invoke(new Action(() => domainUpDown2.Items.Add("0000000" + i)));
                        }
                       
                    }
                }

            }
            log("loaded /dev_hdd0/");
            if (File.Exists(Application.StartupPath + "\\out.txt"))
                File.Delete(Application.StartupPath + "\\out.txt");

            if (File.Exists(Application.StartupPath + "\\idps.bin"))
            {
                log("loading /dev_flash2/");
                if (File.Exists(Application.StartupPath + "\\out.txt"))
                    File.Delete(Application.StartupPath + "\\out.txt");
                command = "ps3xport.exe ExtractPSID ./ psid.bin SetPSID psid.bin SetDeviceID idps.bin ReadIndex ./Archive2.dat";
                retun = CMD(command);
                if (retun == "")
                    listBox2.Invoke(new Action(() => listBox2.Items.Add("Something Seems To Be Wrong With Your Archive Because Its Unreadable")));
                else
                {
                    lines = System.IO.File.ReadAllLines(Application.StartupPath + "\\out.txt");

                    foreach (string line in lines)
                    {
                        if (line.Contains("Total archive size :"))
                        {
                            cleanline = line.Substring(line.IndexOf(':'));
                            if (cleanline.Contains(":"))
                                cleanline = cleanline.Replace(":", "");
                            label9.Invoke(new Action(() => label9.Text = cleanline));
                        }

                        if (line.Contains("/dev_flash2/"))
                        {
                            cleanline = line.Substring(line.IndexOf('/'));
                            listBox2.Invoke(new Action(() => listBox2.Items.Add(cleanline)));
                        }
                        if (line.Contains("/dev_hdd0/"))
                        {
                            cleanline = line.Substring(line.IndexOf('/'));
                            listBox1.Invoke(new Action(() => listBox1.Items.Add(cleanline)));
                        }
                    }

                    log("loaded /dev_flash2/");
                }
                
            }
            if (File.Exists(Application.StartupPath + "\\out.txt"))
                File.Delete(Application.StartupPath + "\\out.txt");
        }

        private void backgroundWorker1_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {

        }

        private void backgroundWorker1_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {

        }

        private void button5_Click(object sender, EventArgs e)
        {
            try
            {
                extractable = listBox1.SelectedItem.ToString();
                Extractedfilename = listBox1.SelectedItem.ToString().Split('/').Last();
            }
            catch
            {

            }
            try
            {
                extractable = listBox2.SelectedItem.ToString();
                Extractedfilename = listBox2.SelectedItem.ToString().Split('/').Last();
            }
            catch
            {

            }

            backgroundWorker4.RunWorkerAsync();
        }

        private void backgroundWorker2_DoWork(object sender, DoWorkEventArgs e)
        {
            FileInfo fi = new FileInfo(txtBack.Text);

            string dirPath = fi.Directory.FullName.Replace("\\", "/");

            log("copying archive1 all of it");
            File.Copy(dirPath + "\\archive.dat", Application.StartupPath + @"\\archive.dat", true);
            for (int i = 0; i <= 9; i++)
            {
                if (File.Exists(dirPath + "\\archive_0" + i + ".dat"))
                    File.Copy(dirPath + "\\archive_0" + i + ".dat", Application.StartupPath + "\\archive_0" + i + ".dat", true);
            }
            for (int i = 10; i <= 99; i++)
            {
                if (File.Exists(dirPath + "\\archive_" + i + ".dat"))
                    File.Copy(dirPath + "\\archive_" + i + ".dat", Application.StartupPath + "\\archive_" + i + ".dat", true);
            }
            log("copying Archive2 all of it");
            File.Copy(dirPath + "\\archive2.dat", Application.StartupPath + @"\\archive2.dat", true);
            for (int i = 0; i <= 9; i++)
            {
                if (File.Exists(dirPath + "\\archive2_0" + i + ".dat"))
                    File.Copy(dirPath + "\\archive2_0" + i + ".dat", Application.StartupPath + "\\archive2_0" + i + ".dat", true);
            }
            for (int i = 10; i <= 99; i++)
            {
                if (File.Exists(dirPath + "\\archive2_" + i + ".dat"))
                    File.Copy(dirPath + "\\archive2_" + i + ".dat", Application.StartupPath + "\\archive2_" + i + ".dat", true);
            }
        }

        private void backgroundWorker2_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            log("Copy Completed");
            button1.Enabled = true;
            button2.Enabled = true;
            button3.Enabled = true;
            button4.Enabled = true;
            button5.Enabled = true;
            button6.Enabled = true;
        }

        private void button12_Click(object sender, EventArgs e)
        {
            backgroundWorker3.RunWorkerAsync();
        }


        #region//Dumpitall
        private void backgroundWorker3_DoWork(object sender, DoWorkEventArgs e)
        {
            DialogResult result = MessageBox.Show("For What Your About To Attempt May Take Hours Are You Sure You Want To Continue ?", "Warring", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
            if (result == DialogResult.Yes)
            {
                if (File.Exists(Application.StartupPath + "\\idps.bin"))
                {
                    log1("Dumping From Archive2");
                    string command = "ps3xport.exe ExtractPSID ./ psid.bin SetPSID psid.bin SetDeviceID ./idps.bin Dump ./ Extracted";
                    string retun = CMD(command);
                    log1("Extracted!");
                }
                log1("Dumping From Archive");
                string commande = "ps3xport.exe ExtractPSID ./ psid.bin SetPSID psid.bin Dump ./ Extracted";
                string retunn = CMD(commande);
                log1("Extracted!");
                MessageBox.Show("Extracted Sucsessfull");
            }
            else
            {
                log1("Cancled By User");
            }
        }
        #endregion

        private void backgroundWorker4_DoWork(object sender, DoWorkEventArgs e)
        {
            try
            {
                log("Extracting File");
                
                if (!Directory.Exists(Application.StartupPath + @"\\Extracted"))
                    Directory.CreateDirectory(Application.StartupPath + @"\\Extracted");
                string command = "ps3xport.exe ExtractPSID ./ psid.bin SetPSID psid.bin ExtractFile ./ " + extractable + " ./" + Extractedfilename;
                string retun = CMD(command);
                if (File.Exists(Application.StartupPath + "\\" + Extractedfilename))
                {
                    File.Move(Application.StartupPath + "\\" + Extractedfilename, Application.StartupPath + @"\\Extracted\\" + Extractedfilename);
                    log("Extracted!");
                }
                else
                {
                    log("Extracting File");
                    command = "ps3xport.exe ExtractPSID ./ psid.bin SetPSID psid.bin SetDeviceID idps.bin ExtractFile ./ " + extractable + " ./" + Extractedfilename;
                    retun = CMD(command);
                    if (File.Exists(Application.StartupPath + "\\" + Extractedfilename))
                    {
                        if (File.Exists(Application.StartupPath + "\\Extracted\\" + Extractedfilename))
                            File.Delete(Application.StartupPath + "\\Extracted\\" + Extractedfilename);
                        File.Move(Application.StartupPath + "\\" + Extractedfilename, Application.StartupPath + @"\\Extracted\\" + Extractedfilename);
                        log("Extracted!");
                    }
                }

            }
            catch (Exception ex)
            {

            }
        }

        private void backgroundWorker4_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {

        }

        #region Archive.Dat Cntls
        private void button8_Click(object sender, EventArgs e)
        {
            if (textBox1.Text != "" || textBox3.Text != "")
            {

                try
                {
                    BGWINSTALLARCHIVE.RunWorkerAsync();
                }
                catch
                {

                }

            }
        }
        private void button6_Click(object sender, EventArgs e)
        {
            try
            {
                extractable = listBox1.SelectedItem.ToString();
                Extractedfilename = listBox1.SelectedItem.ToString().Split('/').Last();
            }

            catch
            {

            }
            try
            {
                extractable = listBox2.SelectedItem.ToString();
                Extractedfilename = listBox2.SelectedItem.ToString().Split('/').Last();
            }
            catch
            {

            }
            Backrgoudpath.RunWorkerAsync();
        }

        private void Backrgoudpath_DoWork(object sender, DoWorkEventArgs e)
        {
            try
            {

                log("Extracting Path");
                if (!Directory.Exists(Application.StartupPath + @"\\Extracted"))
                    Directory.CreateDirectory(Application.StartupPath + @"\\Extracted");

                string command = "ps3xport.exe ExtractPSID ./ psid.bin SetPSID psid.bin ExtractPath ./ " + extractable + " ./" + Extractedfilename;
                string retun = CMD(command);
                if (Directory.Exists(Application.StartupPath + "\\" + Extractedfilename))
                {
                    if (Directory.Exists(Application.StartupPath + "\\Extracted\\" + Extractedfilename))
                        Directory.Delete(Application.StartupPath + "\\Extracted\\" + Extractedfilename, true);
                    Directory.Move(Application.StartupPath + "\\" + Extractedfilename, Application.StartupPath + @"\\Extracted\\" + Extractedfilename);
                    log("Extracted!");
                }
                else
                {
                    log("Extracting Path");
                    command = "ps3xport.exe ExtractPSID ./ psid.bin SetPSID psid.bin SetDeviceID idps.bin ExtractPath ./ " + extractable + " ./" + Extractedfilename;
                    retun = CMD(command);
                    if (Directory.Exists(Application.StartupPath + "\\" + Extractedfilename))
                    {
                        if (Directory.Exists(Application.StartupPath + "\\Extracted\\" + Extractedfilename))
                            Directory.Delete(Application.StartupPath + "\\Extracted\\" + Extractedfilename);
                        Directory.Move(Application.StartupPath + "\\" + Extractedfilename, Application.StartupPath + @"\\Extracted\\" + Extractedfilename);
                        log("Extracted!");
                    }
                }

            }
            catch (Exception ex)
            {
                log("Error");
            }
        }

        private void button9_Click(object sender, EventArgs e)
        {
            ArchiveBrowserFile.Title = "Select File";
            ArchiveBrowserFile.Filter = "All Files |*.*";
            ArchiveBrowserFile.InitialDirectory = System.Environment.SpecialFolder.MyComputer.ToString();
            if (ArchiveBrowserFile.ShowDialog() == DialogResult.OK)
            {
                textBox1.Text = ArchiveBrowserFile.FileName.ToString();
                FileInfo fi = new FileInfo(textBox1.Text);
                string dirPath = fi.Directory.FullName.Replace("\\", "/");

            }
        }

        private void button10_Click(object sender, EventArgs e)
        {
            ArchiveBrowserFolder.Description = "Select A Folder To Install";
            if (ArchiveBrowserFolder.ShowDialog() == DialogResult.OK)
            {
                textBox2.Text = ArchiveBrowserFolder.SelectedPath.ToString();
                DirectoryInfo di = new DirectoryInfo(textBox2.Text);
                string dirPath = di.FullName.Replace("\\", "/");
            }
        }
        #region Validate
        private void button11_Click(object sender, EventArgs e)
        {
            string directorypath = textBox3.Text.Replace("\\", "/");
            if (!directorypath.Contains("/dev_hdd0/") || !directorypath.Contains("/dev_flash2/"))
            {
                MessageBox.Show("You Can Only Save To With Either /dev_hdd0/ or /dev_flash2/", "User Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            else
            {
                MessageBox.Show("Passed");
            }
        }

        private void button13_Click(object sender, EventArgs e)
        {
            string directorypath = textBox4.Text.Replace("\\", "/");
            if (!directorypath.Contains("/dev_hdd0/") || !directorypath.Contains("/dev_flash2/"))
            {
                MessageBox.Show("You Can Only Save To With Either /dev_hdd0/ or /dev_flash2/", "User Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            else
            {
                MessageBox.Show("Passed");
            }
        }
        #endregion
        private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {
            if (checkBox1.Checked == true)
            {
                label15.Visible = true;
                textBox9.Visible = true;
            }
            else if(checkBox1.Checked == false)
            {
                label15.Visible = false;
                textBox9.Visible = false;
            }
        }

        private void checkBox2_CheckedChanged(object sender, EventArgs e)
        {
            if (checkBox2.Checked == true)
            {
                label16.Visible = true;
                textBox10.Visible = true;
            }
            else if (checkBox2.Checked == false)
            {
                label16.Visible = false;
                textBox10.Visible = false;
            }
        }

        private void BGWINSTALLARCHIVE_DoWork(object sender, DoWorkEventArgs e)
        {

            label23.Invoke(new Action(() => label23.Text = ("Installing File")));
            string Filepath = textBox1.Text;
            string Filename = textBox9.Text;
            string Savepath = textBox3.Text;
            if (!Directory.Exists(Application.StartupPath + @"\\ADVC"))
                Directory.CreateDirectory(Application.StartupPath + @"\\ADVC");

            if (File.Exists(Application.StartupPath + @"\\ADVC\\" + Savepath + Filename))
                File.Delete(Application.StartupPath + @"\\ADVC\\" + Savepath + Filename);
            try
            {
                if (!Directory.Exists(Application.StartupPath + @"\\ADVC" + Savepath))
                    Directory.CreateDirectory(Application.StartupPath + @"\\ADVC" + Savepath);
                File.Copy(Filepath, Application.StartupPath + @"\\ADVC" + Savepath + "\\", true);
            }
            catch
            {
               
            }
            if (checkBox1.Checked == true)
            {
                label23.Invoke(new Action(() => label23.Text = ("Removing Original File")));
                string command = "ps3xport.exe ExtractPSID ./ psid.bin SetPSID psid.bin DeleteFile ./ "+Savepath +Filename;
                string retun = CMD(command);
            }
            string commande = "ps3xport.exe ExtractPSID ./ psid.bin SetPSID psid.bin Add ./ ADVC";
            string retunn = CMD(commande);
            label23.Invoke(new Action(() => label23.Text = ("Installed Enjoy")));

        }

        private void button7_Click(object sender, EventArgs e)
        {
            if (textBox2.Text != "" || textBox4.Text != "")
                BGWFOLERARCHIVE.RunWorkerAsync();
        }

        private void BGWINSTALLARCHIVE_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            label23.Text = "File Injected";
        }

        private void BGWFOLERARCHIVE_DoWork(object sender, DoWorkEventArgs e)
        {
            label23.Invoke(new Action(() => label23.Text = ("Installing Folder")));
            string Folderpath = textBox2.Text;
            string Foldername = textBox10.Text;
            string Savepath = textBox4.Text;
            if (!Directory.Exists(Application.StartupPath + @"\\ADVC"))
                Directory.CreateDirectory(Application.StartupPath + @"\\ADVC");

            if (Directory.Exists(Application.StartupPath + @"\\ADVC\\" + Savepath + Foldername))
                File.Delete(Application.StartupPath + @"\\ADVC\\" + Savepath + Foldername);
            try
            {
                if (!Directory.Exists(Application.StartupPath + @"\\ADVC" + Savepath))
                    Directory.CreateDirectory(Application.StartupPath + @"\\ADVC" + Savepath);
                DirectoryCopy(Folderpath, Application.StartupPath + @"\\ADVC" + Savepath + "\\", true);
            }
            catch
            {

            }
            if (checkBox2.Checked == true)
            {
                label23.Invoke(new Action(() => label23.Text = ("Removing Original Folder")));
                string command = "ps3xport.exe ExtractPSID ./ psid.bin SetPSID psid.bin DeletePath ./ " + Savepath +Foldername;
                string retun = CMD(command);
            }
            string commande = "ps3xport.exe ExtractPSID ./ psid.bin SetPSID psid.bin Add ./ ADVC";
            string retunn = CMD(commande);
            label23.Invoke(new Action(() => label23.Text = ("Installed Enjoy")));

        }

        private void BGWFOLERARCHIVE_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            label23.Text = "Foler Injected";
        }

        #endregion

        #region Archve2 CRNTLS

        private void button18_Click(object sender, EventArgs e)
        {
            ArchiveBrowserFile.Title = "Select File";
            ArchiveBrowserFile.Filter = "All Files |*.*";
            ArchiveBrowserFile.InitialDirectory = System.Environment.SpecialFolder.MyComputer.ToString();
            if (ArchiveBrowserFile.ShowDialog() == DialogResult.OK)
            {
                textBox12.Text = ArchiveBrowserFile.FileName.ToString();
                FileInfo fi = new FileInfo(textBox12.Text);
                string dirPath = fi.Directory.FullName.Replace("\\", "/");

            }
        }

       

        private void button17_Click(object sender, EventArgs e)
        {
            ArchiveBrowserFolder.Description = "Select A Folder To Install";
            if (ArchiveBrowserFolder.ShowDialog() == DialogResult.OK)
            {
                textBox11.Text = ArchiveBrowserFolder.SelectedPath.ToString();
                DirectoryInfo di = new DirectoryInfo(textBox11.Text);
                string dirPath = di.FullName.Replace("\\", "/");
            }
        }

        private void button16_Click(object sender, EventArgs e)
        {
            string directorypath = textBox8.Text.Replace("\\", "/");
            if (!directorypath.Contains("/dev_hdd0/") || !directorypath.Contains("/dev_flash2/"))
            {
                MessageBox.Show("You Can Only Save To With Either /dev_hdd0/ or /dev_flash2/", "User Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            else
            {
                MessageBox.Show("Passed");
            }
        }

        private void button15_Click(object sender, EventArgs e)
        {
            string directorypath = textBox7.Text.Replace("\\", "/");
            if (!directorypath.Contains("/dev_hdd0/") || !directorypath.Contains("/dev_flash2/"))
            {
                MessageBox.Show("You Can Only Save To With Either /dev_hdd0/ or /dev_flash2/", "User Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            else
            {
                MessageBox.Show("Passed");
            }
        }

        private void checkBox4_CheckedChanged(object sender, EventArgs e)
        {
            if (checkBox4.Checked == true)
            {
                label13.Visible = true;
                textBox6.Visible = true;
            }
            else if (checkBox4.Checked == false)
            {
                label13.Visible = false;
                textBox6.Visible = false;
            }
        }

        private void checkBox3_CheckedChanged(object sender, EventArgs e)
        {
            if (checkBox4.Checked == true)
            {
                label12.Visible = true;
                textBox5.Visible = true;
            }
            else if (checkBox4.Checked == false)
            {
                label12.Visible = false;
                textBox5.Visible = false;
            }
        }

        private void button19_Click(object sender, EventArgs e)
        {
            if (textBox12.Text != "" || textBox8.Text != "")
            {
                BGWINSTALLARCHIVE2.RunWorkerAsync();
            }
        }

        private void button20_Click(object sender, EventArgs e)
        {
            if (textBox11.Text != "" || textBox7.Text != "")
            {
                BGWFOLERARCHIVE2.RunWorkerAsync();
            }
        }

        private void BGWINSTALLARCHIVE2_DoWork(object sender, DoWorkEventArgs e)
        {
            label24.Invoke(new Action(() => label24.Text = ("Installing File")));
            string Filepath = textBox12.Text;
            string Filename = textBox6.Text;
            string Savepath = textBox8.Text;
            if (!Directory.Exists(Application.StartupPath + @"\\ADVC"))
                Directory.CreateDirectory(Application.StartupPath + @"\\ADVC");

            if (File.Exists(Application.StartupPath + @"\\ADVC\\" + Savepath + Filename))
                File.Delete(Application.StartupPath + @"\\ADVC\\" + Savepath + Filename);
            try
            {
                if (!Directory.Exists(Application.StartupPath + @"\\ADVC" + Savepath))
                    Directory.CreateDirectory(Application.StartupPath + @"\\ADVC" + Savepath);
                File.Copy(Filepath, Application.StartupPath + @"\\ADVC" + Savepath + "\\", true);
            }
            catch
            {

            }
            if (checkBox1.Checked == true)
            {
                label24.Invoke(new Action(() => label24.Text = ("Removing Original File")));
                string command = "ps3xport.exe ExtractPSID ./ psid.bin SetPSID psid.bin SetDeviceID idps.bin DeleteFile ./ " + Savepath + Filename;
                string retun = CMD(command);
            }
            string commande = "ps3xport.exe ExtractPSID ./ psid.bin SetPSID psid.bin SetDeviceID idps.bin AddProtected ./ ADVC";
            string retunn = CMD(commande);
            label24.Invoke(new Action(() => label24.Text = ("Installed Enjoy")));
        }

        private void BGWFOLERARCHIVE2_DoWork(object sender, DoWorkEventArgs e)
        {
            label24.Invoke(new Action(() => label24.Text = ("Installing Folder")));
            string Folderpath = textBox11.Text;
            string Foldername = textBox5.Text;
            string Savepath = textBox7.Text;
            if (!Directory.Exists(Application.StartupPath + @"\\ADVC"))
                Directory.CreateDirectory(Application.StartupPath + @"\\ADVC");

            if (Directory.Exists(Application.StartupPath + @"\\ADVC\\" + Savepath + Foldername))
                File.Delete(Application.StartupPath + @"\\ADVC\\" + Savepath + Foldername);
            try
            {
                if (!Directory.Exists(Application.StartupPath + @"\\ADVC" + Savepath))
                    Directory.CreateDirectory(Application.StartupPath + @"\\ADVC" + Savepath);
                DirectoryCopy(Folderpath, Application.StartupPath + @"\\ADVC" + Savepath + "\\", true);
            }
            catch
            {

            }
            if (checkBox2.Checked == true)
            {
                label24.Invoke(new Action(() => label24.Text = ("Removing Original Folder")));
                string command = "ps3xport.exe ExtractPSID ./ psid.bin SetPSID psid.bin SetDeviceID idps.bin DeletePath ./ " + Savepath + Foldername;
                string retun = CMD(command);
            }
            string commande = "ps3xport.exe ExtractPSID ./ psid.bin SetPSID psid.bin SetDeviceID idps.bin AddProtected ./ ADVC";
            string retunn = CMD(commande);
            label24.Invoke(new Action(() => label24.Text = ("Installed Enjoy")));

        }
        #endregion

        private void button23_Click(object sender, EventArgs e)
        {
            try
            {
                byte[] idps = System.IO.File.ReadAllBytes(Application.StartupPath + "\\idps.bin");
                textBox13.Text = BitConverter.ToString(idps);
            }
            catch
            {
                textBox13.Text = "No IDPS.bin Found";
            }
            try
            {
                if (!File.Exists(Application.StartupPath + "\\psid.bin"))
                {
                    log1("Dumping PSID");
                    string command = "ps3xport.exe ExtractPSID ./ psid.bin ";
                    string retun = CMD(command);
                }
                byte[] psid = System.IO.File.ReadAllBytes(Application.StartupPath + "\\psid.bin");
                textBox14.Text = BitConverter.ToString(psid);
            }

            catch
            {

            }
        }

        private void button21_Click(object sender, EventArgs e)
        {
            string command = "ps3xport.exe ExtractPSID ./ psid.bin SetPSID psid.bin ReadIndex ./archive.dat";
            string retun = CMD(command);
            if (!Directory.Exists(Application.StartupPath + @"\\Extracted"))
                Directory.CreateDirectory(Application.StartupPath + @"\\Extracted");
            if (File.Exists(Application.StartupPath + "\\out.txt"))
                File.Move(Application.StartupPath + "\\out.txt", Application.StartupPath + "\\Extracted\\Archive.txt");
            command = "ps3xport.exe ExtractPSID ./ psid.bin SetPSID psid.bin SetDeviceID idps.bin ReadIndex ./archive2.dat";
            retun = CMD(command);
            if (File.Exists(Application.StartupPath + "\\out.txt"))
                File.Move(Application.StartupPath + "\\out.txt", Application.StartupPath + "\\Extracted\\Archive2.txt");
            log1("Saved To Extracted!");
        }

        private void button22_Click(object sender, EventArgs e)
        {
            MessageBox.Show("Not Just Yet");
        }

        private void Advanced_Load(object sender, EventArgs e)
        {

        }
    }
}
